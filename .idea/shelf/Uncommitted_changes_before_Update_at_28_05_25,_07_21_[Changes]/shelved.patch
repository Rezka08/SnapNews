Index: app/src/main/java/com/example/snapnews/database/NewsDatabaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snapnews.database;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.util.Log;\n\npublic class NewsDatabaseHelper extends SQLiteOpenHelper {\n    private static final String TAG = \"NewsDatabaseHelper\";\n\n    // Database Info\n    private static final String DATABASE_NAME = \"news_database.db\";\n    private static final int DATABASE_VERSION = 1;\n\n    // Table Names\n    public static final String TABLE_ARTICLES = \"articles\";\n\n    // Article Table Columns\n    public static final String COLUMN_ID = \"id\";\n    public static final String COLUMN_TITLE = \"title\";\n    public static final String COLUMN_DESCRIPTION = \"description\";\n    public static final String COLUMN_URL = \"url\";\n    public static final String COLUMN_URL_TO_IMAGE = \"urlToImage\";\n    public static final String COLUMN_PUBLISHED_AT = \"publishedAt\";\n    public static final String COLUMN_CONTENT = \"content\";\n    public static final String COLUMN_AUTHOR = \"author\";\n    public static final String COLUMN_SOURCE_ID = \"sourceId\";\n    public static final String COLUMN_SOURCE_NAME = \"sourceName\";\n    public static final String COLUMN_IS_FAVORITE = \"isFavorite\";\n    public static final String COLUMN_TIMESTAMP = \"timestamp\";\n\n    // Create Articles Table SQL\n    private static final String CREATE_ARTICLES_TABLE =\n            \"CREATE TABLE \" + TABLE_ARTICLES + \" (\" +\n                    COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n                    COLUMN_TITLE + \" TEXT, \" +\n                    COLUMN_DESCRIPTION + \" TEXT, \" +\n                    COLUMN_URL + \" TEXT UNIQUE, \" + // URL sebagai unique identifier\n                    COLUMN_URL_TO_IMAGE + \" TEXT, \" +\n                    COLUMN_PUBLISHED_AT + \" TEXT, \" +\n                    COLUMN_CONTENT + \" TEXT, \" +\n                    COLUMN_AUTHOR + \" TEXT, \" +\n                    COLUMN_SOURCE_ID + \" TEXT, \" +\n                    COLUMN_SOURCE_NAME + \" TEXT, \" +\n                    COLUMN_IS_FAVORITE + \" INTEGER DEFAULT 0, \" +\n                    COLUMN_TIMESTAMP + \" INTEGER DEFAULT 0\" +\n                    \")\";\n\n    // Singleton instance\n    private static NewsDatabaseHelper sInstance;\n\n    // Private constructor untuk singleton\n    private NewsDatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n        Log.d(TAG, \"NewsDatabaseHelper constructor called\");\n    }\n\n    public static synchronized NewsDatabaseHelper getInstance(Context context) {\n        if (sInstance == null) {\n            sInstance = new NewsDatabaseHelper(context.getApplicationContext());\n            Log.d(TAG, \"NewsDatabaseHelper instance created\");\n        }\n        return sInstance;\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        Log.d(TAG, \"Creating database tables\");\n        try {\n            db.execSQL(CREATE_ARTICLES_TABLE);\n            Log.d(TAG, \"Articles table created successfully\");\n        } catch (Exception e) {\n            Log.e(TAG, \"Error creating tables\", e);\n        }\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        Log.d(TAG, \"Upgrading database from version \" + oldVersion + \" to \" + newVersion);\n\n        if (oldVersion != newVersion) {\n            try {\n                // Drop existing tables\n                db.execSQL(\"DROP TABLE IF EXISTS \" + TABLE_ARTICLES);\n                Log.d(TAG, \"Old tables dropped\");\n\n                // Recreate tables\n                onCreate(db);\n                Log.d(TAG, \"Tables recreated successfully\");\n            } catch (Exception e) {\n                Log.e(TAG, \"Error upgrading database\", e);\n            }\n        }\n    }\n\n    @Override\n    public void onOpen(SQLiteDatabase db) {\n        super.onOpen(db);\n        Log.d(TAG, \"Database opened\");\n\n        if (!db.isReadOnly()) {\n            try {\n                // Enable foreign key constraints\n                db.execSQL(\"PRAGMA foreign_keys=ON;\");\n                Log.d(TAG, \"Foreign keys enabled\");\n            } catch (Exception e) {\n                Log.e(TAG, \"Error enabling foreign keys\", e);\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/database/NewsDatabaseHelper.java b/app/src/main/java/com/example/snapnews/database/NewsDatabaseHelper.java
--- a/app/src/main/java/com/example/snapnews/database/NewsDatabaseHelper.java	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/java/com/example/snapnews/database/NewsDatabaseHelper.java	(date 1748355807968)
@@ -35,7 +35,7 @@
                     COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                     COLUMN_TITLE + " TEXT, " +
                     COLUMN_DESCRIPTION + " TEXT, " +
-                    COLUMN_URL + " TEXT UNIQUE, " + // URL sebagai unique identifier
+                    COLUMN_URL + " TEXT UNIQUE, " +
                     COLUMN_URL_TO_IMAGE + " TEXT, " +
                     COLUMN_PUBLISHED_AT + " TEXT, " +
                     COLUMN_CONTENT + " TEXT, " +
Index: app/src/main/java/com/example/snapnews/models/Article.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snapnews.models;\n\nimport androidx.room.Entity;\nimport androidx.room.PrimaryKey;\nimport com.google.gson.annotations.SerializedName;\n\n@Entity(tableName = \"articles\")\npublic class Article {\n    @PrimaryKey(autoGenerate = true)\n    private int id;\n\n    @SerializedName(\"title\")\n    private String title;\n\n    @SerializedName(\"description\")\n    private String description;\n\n    @SerializedName(\"url\")\n    private String url;\n\n    @SerializedName(\"urlToImage\")\n    private String urlToImage;\n\n    @SerializedName(\"publishedAt\")\n    private String publishedAt;\n\n    @SerializedName(\"content\")\n    private String content;\n\n    @SerializedName(\"author\")\n    private String author;\n\n    @SerializedName(\"source\")\n    private Source source;\n\n    private boolean isFavorite = false;\n    private long timestamp = System.currentTimeMillis();\n\n    // Constructors\n    public Article() {}\n\n    public Article(String title, String description, String url, String urlToImage,\n                   String publishedAt, String content, String author, Source source) {\n        this.title = title;\n        this.description = description;\n        this.url = url;\n        this.urlToImage = urlToImage;\n        this.publishedAt = publishedAt;\n        this.content = content;\n        this.author = author;\n        this.source = source;\n    }\n\n    // Getters and Setters\n    public int getId() { return id; }\n    public void setId(int id) { this.id = id; }\n\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n\n    public String getUrl() { return url; }\n    public void setUrl(String url) { this.url = url; }\n\n    public String getUrlToImage() { return urlToImage; }\n    public void setUrlToImage(String urlToImage) { this.urlToImage = urlToImage; }\n\n    public String getPublishedAt() { return publishedAt; }\n    public void setPublishedAt(String publishedAt) { this.publishedAt = publishedAt; }\n\n    public String getContent() { return content; }\n    public void setContent(String content) { this.content = content; }\n\n    public String getAuthor() { return author; }\n    public void setAuthor(String author) { this.author = author; }\n\n    public Source getSource() { return source; }\n    public void setSource(Source source) { this.source = source; }\n\n    public boolean isFavorite() { return isFavorite; }\n    public void setFavorite(boolean favorite) { isFavorite = favorite; }\n\n    public long getTimestamp() { return timestamp; }\n    public void setTimestamp(long timestamp) { this.timestamp = timestamp; }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/models/Article.java b/app/src/main/java/com/example/snapnews/models/Article.java
--- a/app/src/main/java/com/example/snapnews/models/Article.java	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/java/com/example/snapnews/models/Article.java	(date 1748350142632)
@@ -1,12 +1,9 @@
 package com.example.snapnews.models;
 
-import androidx.room.Entity;
-import androidx.room.PrimaryKey;
 import com.google.gson.annotations.SerializedName;
 
-@Entity(tableName = "articles")
 public class Article {
-    @PrimaryKey(autoGenerate = true)
+    // Menghapus @Entity, @PrimaryKey, dan semua anotasi Room
     private int id;
 
     @SerializedName("title")
@@ -33,6 +30,7 @@
     @SerializedName("source")
     private Source source;
 
+    // Removed Room annotations - hanya field biasa untuk SQLite
     private boolean isFavorite = false;
     private long timestamp = System.currentTimeMillis();
 
@@ -49,9 +47,10 @@
         this.content = content;
         this.author = author;
         this.source = source;
+        this.timestamp = System.currentTimeMillis(); // Set timestamp saat dibuat
     }
 
-    // Getters and Setters
+    // Getters and Setters - tetap sama seperti sebelumnya
     public int getId() { return id; }
     public void setId(int id) { this.id = id; }
 
@@ -84,4 +83,16 @@
 
     public long getTimestamp() { return timestamp; }
     public void setTimestamp(long timestamp) { this.timestamp = timestamp; }
-}
+
+    // Helper method untuk debugging
+    @Override
+    public String toString() {
+        return "Article{" +
+                "id=" + id +
+                ", title='" + title + '\'' +
+                ", url='" + url + '\'' +
+                ", isFavorite=" + isFavorite +
+                ", timestamp=" + timestamp +
+                '}';
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/activity/DetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snapnews.activity;\n\nimport android.content.ActivityNotFoundException;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\nimport android.view.View;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.ImageView;\nimport android.widget.Toast;\nimport androidx.appcompat.app.AppCompatActivity;\nimport com.bumptech.glide.Glide;\nimport com.example.snapnews.R;\nimport com.example.snapnews.database.ArticleDao;\nimport com.example.snapnews.database.NewsDatabase;\nimport com.example.snapnews.databinding.ActivityDetailBinding;\nimport com.example.snapnews.models.Article;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class DetailActivity extends AppCompatActivity {\n    private static final String TAG = \"DetailActivity\";\n    private ActivityDetailBinding binding;\n    private Article article;\n    private ArticleDao articleDao;\n    private ExecutorService executorService;\n    private Handler mainHandler;\n    private boolean isDestroyed = false;\n    private boolean isFavorite = false;\n    private ImageView btnFavorite;\n\n    public static final String EXTRA_ARTICLE_TITLE = \"extra_article_title\";\n    public static final String EXTRA_ARTICLE_DESCRIPTION = \"extra_article_description\";\n    public static final String EXTRA_ARTICLE_URL = \"extra_article_url\";\n    public static final String EXTRA_ARTICLE_IMAGE_URL = \"extra_article_image_url\";\n    public static final String EXTRA_ARTICLE_PUBLISHED_AT = \"extra_article_published_at\";\n    public static final String EXTRA_ARTICLE_CONTENT = \"extra_article_content\";\n    public static final String EXTRA_ARTICLE_AUTHOR = \"extra_article_author\";\n    public static final String EXTRA_ARTICLE_SOURCE = \"extra_article_source\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        try {\n            binding = ActivityDetailBinding.inflate(getLayoutInflater());\n            setContentView(binding.getRoot());\n\n            // Initialize components\n            mainHandler = new Handler(Looper.getMainLooper());\n            initializeDatabase();\n            getArticleFromIntent();\n            setupUI();\n            setupButtons();\n            setupFavoriteButton();\n            checkFavoriteStatus();\n\n            Log.d(TAG, \"DetailActivity created successfully\");\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in onCreate: \" + e.getMessage(), e);\n            finish();\n        }\n    }\n\n    private void initializeDatabase() {\n        try {\n            NewsDatabase database = NewsDatabase.getDatabase(this);\n            articleDao = database.articleDao();\n            executorService = Executors.newSingleThreadExecutor();\n        } catch (Exception e) {\n            Log.e(TAG, \"Error initializing database: \" + e.getMessage(), e);\n        }\n    }\n\n    private void getArticleFromIntent() {\n        try {\n            Intent intent = getIntent();\n            article = new Article();\n            article.setTitle(intent.getStringExtra(EXTRA_ARTICLE_TITLE));\n            article.setDescription(intent.getStringExtra(EXTRA_ARTICLE_DESCRIPTION));\n            article.setUrl(intent.getStringExtra(EXTRA_ARTICLE_URL));\n            article.setUrlToImage(intent.getStringExtra(EXTRA_ARTICLE_IMAGE_URL));\n            article.setPublishedAt(intent.getStringExtra(EXTRA_ARTICLE_PUBLISHED_AT));\n            article.setContent(intent.getStringExtra(EXTRA_ARTICLE_CONTENT));\n            article.setAuthor(intent.getStringExtra(EXTRA_ARTICLE_AUTHOR));\n\n            Log.d(TAG, \"Article data loaded: \" + article.getTitle());\n        } catch (Exception e) {\n            Log.e(TAG, \"Error getting article from intent: \" + e.getMessage(), e);\n        }\n    }\n\n    private void setupFavoriteButton() {\n        try {\n            btnFavorite = binding.toolbar.findViewById(R.id.btn_favorite);\n            if (btnFavorite != null) {\n                btnFavorite.setOnClickListener(v -> toggleFavorite());\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error setting up favorite button: \" + e.getMessage(), e);\n        }\n    }\n\n    private void checkFavoriteStatus() {\n        if (article == null || article.getUrl() == null) return;\n\n        executorService.execute(() -> {\n            try {\n                Article existingArticle = articleDao.getArticleByUrl(article.getUrl());\n                boolean currentFavoriteStatus = existingArticle != null && existingArticle.isFavorite();\n\n                mainHandler.post(() -> {\n                    isFavorite = currentFavoriteStatus;\n                    updateFavoriteIcon();\n                });\n            } catch (Exception e) {\n                Log.e(TAG, \"Error checking favorite status: \" + e.getMessage(), e);\n            }\n        });\n    }\n\n    private void toggleFavorite() {\n        if (article == null || article.getUrl() == null) {\n            Toast.makeText(this, \"Cannot save this article\", Toast.LENGTH_SHORT).show();\n            return;\n        }\n\n        // Toggle status immediately for UI responsiveness\n        isFavorite = !isFavorite;\n        updateFavoriteIcon();\n\n        // Update database in background\n        executorService.execute(() -> {\n            try {\n                Article existingArticle = articleDao.getArticleByUrl(article.getUrl());\n\n                if (existingArticle != null) {\n                    // Update existing article\n                    existingArticle.setFavorite(isFavorite);\n                    articleDao.updateArticle(existingArticle);\n                } else if (isFavorite) {\n                    // Insert new article as favorite\n                    article.setFavorite(true);\n                    article.setTimestamp(System.currentTimeMillis());\n                    articleDao.insertArticle(article);\n                }\n\n                mainHandler.post(() -> {\n                    String message = isFavorite ? \"Added to favorites\" : \"Removed from favorites\";\n                    Toast.makeText(DetailActivity.this, message, Toast.LENGTH_SHORT).show();\n                });\n\n                Log.d(TAG, \"Favorite status updated: \" + isFavorite);\n            } catch (Exception e) {\n                Log.e(TAG, \"Error updating favorite: \" + e.getMessage(), e);\n\n                // Revert UI change if database update failed\n                mainHandler.post(() -> {\n                    isFavorite = !isFavorite;\n                    updateFavoriteIcon();\n                    Toast.makeText(DetailActivity.this, \"Failed to update favorite\", Toast.LENGTH_SHORT).show();\n                });\n            }\n        });\n    }\n\n    private void updateFavoriteIcon() {\n        try {\n            if (btnFavorite != null) {\n                int iconRes = isFavorite ? R.drawable.ic_favorite_filled : R.drawable.ic_favorite_border;\n                btnFavorite.setImageResource(iconRes);\n\n                // Add animation\n                btnFavorite.animate().scaleX(1.2f).scaleY(1.2f).setDuration(100)\n                        .withEndAction(() -> btnFavorite.animate().scaleX(1f).scaleY(1f).setDuration(100));\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error updating favorite icon: \" + e.getMessage(), e);\n        }\n    }\n\n    private void setupUI() {\n        if (article == null || isDestroyed) return;\n\n        try {\n            // Set title\n            if (article.getTitle() != null) {\n                binding.textTitle.setText(article.getTitle());\n            }\n\n            // Set description\n            if (article.getDescription() != null && !article.getDescription().isEmpty()) {\n                binding.textDescription.setText(article.getDescription());\n                binding.textDescription.setVisibility(View.VISIBLE);\n            } else {\n                binding.textDescription.setVisibility(View.GONE);\n            }\n\n            // Set author and date\n            setupAuthorDate();\n\n            // Load image safely\n            loadArticleImage();\n\n            // Setup WebView with proper cleanup\n            setupWebViewSafely();\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in setupUI: \" + e.getMessage(), e);\n        }\n    }\n\n    private void setupAuthorDate() {\n        try {\n            String authorDate = \"\";\n            if (article.getAuthor() != null && !article.getAuthor().isEmpty()) {\n                authorDate = \"By \" + article.getAuthor();\n            }\n            if (article.getPublishedAt() != null) {\n                String formattedDate = formatDate(article.getPublishedAt());\n                if (!authorDate.isEmpty()) {\n                    authorDate += \" • \" + formattedDate;\n                } else {\n                    authorDate = formattedDate;\n                }\n            }\n            if (!authorDate.isEmpty()) {\n                binding.textAuthorDate.setText(authorDate);\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error setting author date: \" + e.getMessage(), e);\n        }\n    }\n\n    private void loadArticleImage() {\n        try {\n            if (article.getUrlToImage() != null && !article.getUrlToImage().isEmpty() && !isDestroyed) {\n                Glide.with(this)\n                        .load(article.getUrlToImage())\n                        .placeholder(R.drawable.placeholder_image)\n                        .error(R.drawable.placeholder_image)\n                        .into(binding.imageArticle);\n            } else {\n                binding.imageArticle.setImageResource(R.drawable.placeholder_image);\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error loading image: \" + e.getMessage(), e);\n            binding.imageArticle.setImageResource(R.drawable.placeholder_image);\n        }\n    }\n\n    private void setupWebViewSafely() {\n        if (isDestroyed || binding.webView == null) return;\n\n        try {\n            // Configure WebView settings\n            binding.webView.getSettings().setJavaScriptEnabled(false); // Disable JS for stability\n            binding.webView.getSettings().setDomStorageEnabled(false);\n            binding.webView.getSettings().setCacheMode(android.webkit.WebSettings.LOAD_NO_CACHE);\n\n            // Set WebView client with proper cleanup\n            binding.webView.setWebViewClient(new WebViewClient() {\n                @Override\n                public void onPageStarted(WebView view, String url, Bitmap favicon) {\n                    super.onPageStarted(view, url, favicon);\n                    if (!isDestroyed && binding.progressBar != null) {\n                        binding.progressBar.setVisibility(View.VISIBLE);\n                    }\n                }\n\n                @Override\n                public void onPageFinished(WebView view, String url) {\n                    super.onPageFinished(view, url);\n                    if (!isDestroyed && binding.progressBar != null) {\n                        binding.progressBar.setVisibility(View.GONE);\n                    }\n                }\n\n                @Override\n                public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n                    super.onReceivedError(view, errorCode, description, failingUrl);\n                    Log.e(TAG, \"WebView error: \" + description);\n                    if (!isDestroyed && binding.progressBar != null) {\n                        binding.progressBar.setVisibility(View.GONE);\n                    }\n                }\n            });\n\n            // Load content\n            loadWebViewContent();\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Error setting up WebView: \" + e.getMessage(), e);\n            if (binding.progressBar != null) {\n                binding.progressBar.setVisibility(View.GONE);\n            }\n        }\n    }\n\n    private void loadWebViewContent() {\n        try {\n            if (article.getContent() != null && !article.getContent().isEmpty()) {\n                String htmlContent = \"<html><head>\" +\n                        \"<meta name='viewport' content='width=device-width, initial-scale=1.0'>\" +\n                        \"<style>\" +\n                        \"body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; padding: 16px; }\" +\n                        \"img { max-width: 100%; height: auto; }\" +\n                        \"</style>\" +\n                        \"</head><body>\"\n                        + article.getContent().replace(\"\\n\", \"<br>\") +\n                        \"</body></html>\";\n                binding.webView.loadDataWithBaseURL(null, htmlContent, \"text/html\", \"UTF-8\", null);\n            } else {\n                binding.webView.loadData(\"<html><body><p>Content not available</p></body></html>\", \"text/html\", \"UTF-8\");\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error loading WebView content: \" + e.getMessage(), e);\n        }\n    }\n\n    private void setupButtons() {\n        try {\n            // Use toolbar instead of button_back\n            if (binding.toolbar != null) {\n                binding.toolbar.setNavigationOnClickListener(v -> safeFinish());\n            }\n\n            // Share button\n            if (binding.fabShare != null) {\n                binding.fabShare.setOnClickListener(v -> shareArticleSafely());\n            }\n\n            // Open browser button\n            if (binding.fabOpenBrowser != null) {\n                binding.fabOpenBrowser.setOnClickListener(v -> openInBrowserSafely());\n            }\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Error setting up buttons: \" + e.getMessage(), e);\n        }\n    }\n\n    private void shareArticleSafely() {\n        try {\n            Intent shareIntent = new Intent(Intent.ACTION_SEND);\n            shareIntent.setType(\"text/plain\");\n            String shareText = (article.getTitle() != null ? article.getTitle() : \"News Article\") +\n                    \"\\n\\n\" + (article.getUrl() != null ? article.getUrl() : \"\");\n            shareIntent.putExtra(Intent.EXTRA_TEXT, shareText);\n\n            // Add FLAG_ACTIVITY_NEW_TASK to prevent memory issues\n            shareIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\n            startActivity(Intent.createChooser(shareIntent, \"Share article\"));\n\n            Log.d(TAG, \"Share intent started successfully\");\n        } catch (Exception e) {\n            Log.e(TAG, \"Error sharing article: \" + e.getMessage(), e);\n            Toast.makeText(this, \"Unable to share article\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    // MAIN FIX: Improved browser opening with proper cleanup\n    private void openInBrowserSafely() {\n        try {\n            if (article.getUrl() == null || article.getUrl().isEmpty()) {\n                Toast.makeText(this, \"No URL available\", Toast.LENGTH_SHORT).show();\n                return;\n            }\n\n            String url = article.getUrl();\n\n            // Ensure URL starts with http:// or https://\n            if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n                url = \"https://\" + url;\n            }\n\n            Log.d(TAG, \"Opening URL: \" + url);\n\n            // Method 1: Try simple browser intent first\n            if (openBrowserSimple(url)) {\n                return;\n            }\n\n            // Method 2: Try with explicit browser apps\n            if (openBrowserExplicit(url)) {\n                return;\n            }\n\n            // Method 3: Try with chooser\n            if (openBrowserWithChooser(url)) {\n                return;\n            }\n\n            // Method 4: Copy URL as fallback\n            copyUrlToClipboard(url);\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Error opening browser: \" + e.getMessage(), e);\n            Toast.makeText(this, \"Unable to open browser\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    // Method 1: Simple browser intent\n    private boolean openBrowserSimple(String url) {\n        try {\n            Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n\n            // Check if there's an app to handle this\n            if (browserIntent.resolveActivity(getPackageManager()) != null) {\n                startActivity(browserIntent);\n                Log.d(TAG, \"Opened with simple intent\");\n                return true;\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Simple browser intent failed: \" + e.getMessage());\n        }\n        return false;\n    }\n\n    // Method 2: Try explicit browser apps\n    private boolean openBrowserExplicit(String url) {\n        try {\n            // List of common browser package names\n            String[] browsers = {\n                    \"com.android.chrome\",           // Chrome\n                    \"com.android.browser\",          // Default Android Browser\n                    \"org.mozilla.firefox\",          // Firefox\n                    \"com.opera.browser\",            // Opera\n                    \"com.UCMobile.intl\",           // UC Browser\n                    \"com.microsoft.emmx\",           // Edge\n                    \"com.brave.browser\"            // Brave\n            };\n\n            for (String browserPackage : browsers) {\n                try {\n                    Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n                    browserIntent.setPackage(browserPackage);\n\n                    if (browserIntent.resolveActivity(getPackageManager()) != null) {\n                        startActivity(browserIntent);\n                        Log.d(TAG, \"Opened with browser: \" + browserPackage);\n                        return true;\n                    }\n                } catch (Exception e) {\n                    // Try next browser\n                    continue;\n                }\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Explicit browser intent failed: \" + e.getMessage());\n        }\n        return false;\n    }\n\n    // Method 3: Browser with chooser\n    private boolean openBrowserWithChooser(String url) {\n        try {\n            Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n            Intent chooserIntent = Intent.createChooser(browserIntent, \"Open with\");\n\n            if (chooserIntent.resolveActivity(getPackageManager()) != null) {\n                startActivity(chooserIntent);\n                Log.d(TAG, \"Opened with chooser\");\n                return true;\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Chooser intent failed: \" + e.getMessage());\n        }\n        return false;\n    }\n\n    // Method 4: Copy URL as fallback\n    private void copyUrlToClipboard(String url) {\n        try {\n            android.content.ClipboardManager clipboard =\n                    (android.content.ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);\n            android.content.ClipData clip = android.content.ClipData.newPlainText(\"News URL\", url);\n            clipboard.setPrimaryClip(clip);\n\n            Toast.makeText(this, \"No browser found. URL copied to clipboard: \" + url,\n                    Toast.LENGTH_LONG).show();\n            Log.d(TAG, \"URL copied to clipboard as fallback\");\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to copy URL: \" + e.getMessage());\n            Toast.makeText(this, \"Unable to open browser or copy URL\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    // CRITICAL: Proper WebView cleanup\n    private void cleanupWebView() {\n        try {\n            if (binding.webView != null) {\n                binding.webView.stopLoading();\n                binding.webView.clearCache(true);\n                binding.webView.clearHistory();\n                binding.webView.loadUrl(\"about:blank\");\n                Log.d(TAG, \"WebView cleaned up\");\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error cleaning WebView: \" + e.getMessage(), e);\n        }\n    }\n\n    private void safeFinish() {\n        try {\n            cleanupWebView();\n            finish();\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in safeFinish: \" + e.getMessage(), e);\n            finish();\n        }\n    }\n\n    private String formatDate(String dateString) {\n        try {\n            if (dateString != null && dateString.length() >= 10) {\n                return dateString.substring(0, 10);\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error formatting date: \" + e.getMessage(), e);\n        }\n        return dateString;\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        try {\n            if (binding.webView != null) {\n                binding.webView.onPause();\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in onPause: \" + e.getMessage(), e);\n        }\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        try {\n            if (binding.webView != null && !isDestroyed) {\n                binding.webView.onResume();\n            }\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in onResume: \" + e.getMessage(), e);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        isDestroyed = true;\n\n        try {\n            // Cleanup WebView\n            if (binding.webView != null) {\n                binding.webView.stopLoading();\n                binding.webView.clearCache(true);\n                binding.webView.clearHistory();\n                binding.webView.destroy();\n            }\n\n            // Cleanup executor service\n            if (executorService != null && !executorService.isShutdown()) {\n                executorService.shutdown();\n            }\n\n            // Clear handlers\n            if (mainHandler != null) {\n                mainHandler.removeCallbacksAndMessages(null);\n            }\n\n            // Clear binding\n            binding = null;\n\n            Log.d(TAG, \"DetailActivity destroyed and cleaned up\");\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in onDestroy: \" + e.getMessage(), e);\n        }\n\n        super.onDestroy();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/activity/DetailActivity.java b/app/src/main/java/com/example/snapnews/activity/DetailActivity.java
--- a/app/src/main/java/com/example/snapnews/activity/DetailActivity.java	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/java/com/example/snapnews/activity/DetailActivity.java	(date 1748350142643)
@@ -18,7 +18,7 @@
 import com.bumptech.glide.Glide;
 import com.example.snapnews.R;
 import com.example.snapnews.database.ArticleDao;
-import com.example.snapnews.database.NewsDatabase;
+import com.example.snapnews.database.NewsDatabaseHelper;
 import com.example.snapnews.databinding.ActivityDetailBinding;
 import com.example.snapnews.models.Article;
 import java.util.concurrent.ExecutorService;
@@ -70,8 +70,8 @@
 
     private void initializeDatabase() {
         try {
-            NewsDatabase database = NewsDatabase.getDatabase(this);
-            articleDao = database.articleDao();
+            NewsDatabaseHelper database = NewsDatabaseHelper.getInstance(this);
+            articleDao = new ArticleDao(database);
             executorService = Executors.newSingleThreadExecutor();
         } catch (Exception e) {
             Log.e(TAG, "Error initializing database: " + e.getMessage(), e);
@@ -587,4 +587,5 @@
 
         super.onDestroy();
     }
-}
\ No newline at end of file
+}
+
Index: app/src/main/java/com/example/snapnews/database/ArticleDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snapnews.database;\n\nimport androidx.room.Dao;\nimport androidx.room.Delete;\nimport androidx.room.Insert;\nimport androidx.room.OnConflictStrategy;\nimport androidx.room.Query;\nimport androidx.room.Update;\nimport com.example.snapnews.models.Article;\nimport java.util.List;\n\n@Dao\npublic interface ArticleDao {\n    @Query(\"SELECT * FROM articles ORDER BY timestamp DESC\")\n    List<Article> getAllArticles();\n\n    @Query(\"SELECT * FROM articles WHERE isFavorite = 1 ORDER BY timestamp DESC\")\n    List<Article> getFavoriteArticles();\n\n    @Query(\"SELECT * FROM articles WHERE title LIKE '%' || :query || '%' OR description LIKE '%' || :query || '%'\")\n    List<Article> searchArticles(String query);\n\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    void insertArticle(Article article);\n\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    void insertArticles(List<Article> articles);\n\n    @Update\n    void updateArticle(Article article);\n\n    @Delete\n    void deleteArticle(Article article);\n\n    @Query(\"DELETE FROM articles WHERE isFavorite = 0\")\n    void deleteNonFavoriteArticles();\n\n    @Query(\"SELECT * FROM articles WHERE url = :url LIMIT 1\")\n    Article getArticleByUrl(String url);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/database/ArticleDao.java b/app/src/main/java/com/example/snapnews/database/ArticleDao.java
--- a/app/src/main/java/com/example/snapnews/database/ArticleDao.java	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/java/com/example/snapnews/database/ArticleDao.java	(date 1748350142680)
@@ -1,40 +1,356 @@
+// database/ArticleDao.java - Updated untuk menggunakan NewsDatabaseHelper
 package com.example.snapnews.database;
 
-import androidx.room.Dao;
-import androidx.room.Delete;
-import androidx.room.Insert;
-import androidx.room.OnConflictStrategy;
-import androidx.room.Query;
-import androidx.room.Update;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
 import com.example.snapnews.models.Article;
+import com.example.snapnews.models.Source;
+import java.util.ArrayList;
 import java.util.List;
 
-@Dao
-public interface ArticleDao {
-    @Query("SELECT * FROM articles ORDER BY timestamp DESC")
-    List<Article> getAllArticles();
+public class ArticleDao {
+    private static final String TAG = "ArticleDao";
+    private final NewsDatabaseHelper dbHelper; // GANTI dari NewsDatabase ke NewsDatabaseHelper
+
+    public ArticleDao(NewsDatabaseHelper dbHelper) {
+        this.dbHelper = dbHelper;
+        Log.d(TAG, "ArticleDao initialized with NewsDatabaseHelper");
+    }
+
+    // GET ALL ARTICLES
+    public List<Article> getAllArticles() {
+        List<Article> articles = new ArrayList<>();
+        SQLiteDatabase db = null;
+        Cursor cursor = null;
+
+        try {
+            db = dbHelper.getReadableDatabase();
+            String query = "SELECT * FROM " + NewsDatabaseHelper.TABLE_ARTICLES +
+                    " ORDER BY " + NewsDatabaseHelper.COLUMN_TIMESTAMP + " DESC";
+
+            cursor = db.rawQuery(query, null);
+            Log.d(TAG, "getAllArticles - Found " + cursor.getCount() + " articles");
+
+            if (cursor.moveToFirst()) {
+                do {
+                    Article article = cursorToArticle(cursor);
+                    if (article != null) {
+                        articles.add(article);
+                    }
+                } while (cursor.moveToNext());
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error getting all articles", e);
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+            if (db != null) {
+                db.close();
+            }
+        }
+
+        return articles;
+    }
+
+    // GET FAVORITE ARTICLES
+    public List<Article> getFavoriteArticles() {
+        List<Article> articles = new ArrayList<>();
+        SQLiteDatabase db = null;
+        Cursor cursor = null;
+
+        try {
+            db = dbHelper.getReadableDatabase();
+            String query = "SELECT * FROM " + NewsDatabaseHelper.TABLE_ARTICLES +
+                    " WHERE " + NewsDatabaseHelper.COLUMN_IS_FAVORITE + " = 1" +
+                    " ORDER BY " + NewsDatabaseHelper.COLUMN_TIMESTAMP + " DESC";
+
+            cursor = db.rawQuery(query, null);
+            Log.d(TAG, "getFavoriteArticles - Found " + cursor.getCount() + " favorite articles");
+
+            if (cursor.moveToFirst()) {
+                do {
+                    Article article = cursorToArticle(cursor);
+                    if (article != null) {
+                        articles.add(article);
+                    }
+                } while (cursor.moveToNext());
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error getting favorite articles", e);
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+            if (db != null) {
+                db.close();
+            }
+        }
+
+        return articles;
+    }
+
+    // SEARCH ARTICLES
+    public List<Article> searchArticles(String query) {
+        List<Article> articles = new ArrayList<>();
+        SQLiteDatabase db = null;
+        Cursor cursor = null;
+
+        try {
+            db = dbHelper.getReadableDatabase();
+            String sqlQuery = "SELECT * FROM " + NewsDatabaseHelper.TABLE_ARTICLES +
+                    " WHERE " + NewsDatabaseHelper.COLUMN_TITLE + " LIKE ? OR " +
+                    NewsDatabaseHelper.COLUMN_DESCRIPTION + " LIKE ?" +
+                    " ORDER BY " + NewsDatabaseHelper.COLUMN_TIMESTAMP + " DESC";
+
+            String searchPattern = "%" + query + "%";
+            String[] selectionArgs = {searchPattern, searchPattern};
+
+            cursor = db.rawQuery(sqlQuery, selectionArgs);
+            Log.d(TAG, "searchArticles - Found " + cursor.getCount() + " articles for query: " + query);
+
+            if (cursor.moveToFirst()) {
+                do {
+                    Article article = cursorToArticle(cursor);
+                    if (article != null) {
+                        articles.add(article);
+                    }
+                } while (cursor.moveToNext());
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error searching articles", e);
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+            if (db != null) {
+                db.close();
+            }
+        }
+
+        return articles;
+    }
+
+    // INSERT ARTICLE
+    public void insertArticle(Article article) {
+        SQLiteDatabase db = null;
+
+        try {
+            db = dbHelper.getWritableDatabase();
+            ContentValues values = articleToContentValues(article);
+
+            // Use INSERT OR REPLACE untuk handle conflict
+            long result = db.insertWithOnConflict(
+                    NewsDatabaseHelper.TABLE_ARTICLES,
+                    null,
+                    values,
+                    SQLiteDatabase.CONFLICT_REPLACE
+            );
+
+            if (result != -1) {
+                Log.d(TAG, "Article inserted successfully with ID: " + result);
+            } else {
+                Log.e(TAG, "Failed to insert article");
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error inserting article", e);
+        } finally {
+            if (db != null) {
+                db.close();
+            }
+        }
+    }
+
+    // INSERT MULTIPLE ARTICLES
+    public void insertArticles(List<Article> articles) {
+        SQLiteDatabase db = null;
+
+        try {
+            db = dbHelper.getWritableDatabase();
+            db.beginTransaction();
+
+            for (Article article : articles) {
+                ContentValues values = articleToContentValues(article);
+                db.insertWithOnConflict(
+                        NewsDatabaseHelper.TABLE_ARTICLES,
+                        null,
+                        values,
+                        SQLiteDatabase.CONFLICT_REPLACE
+                );
+            }
+
+            db.setTransactionSuccessful();
+            Log.d(TAG, "Successfully inserted " + articles.size() + " articles");
+
+        } catch (Exception e) {
+            Log.e(TAG, "Error inserting articles", e);
+        } finally {
+            if (db != null) {
+                db.endTransaction();
+                db.close();
+            }
+        }
+    }
+
+    // UPDATE ARTICLE
+    public void updateArticle(Article article) {
+        SQLiteDatabase db = null;
+
+        try {
+            db = dbHelper.getWritableDatabase();
+            ContentValues values = articleToContentValues(article);
+
+            int rowsAffected = db.update(
+                    NewsDatabaseHelper.TABLE_ARTICLES,
+                    values,
+                    NewsDatabaseHelper.COLUMN_URL + " = ?",
+                    new String[]{article.getUrl()}
+            );
+
+            Log.d(TAG, "Updated " + rowsAffected + " articles");
+        } catch (Exception e) {
+            Log.e(TAG, "Error updating article", e);
+        } finally {
+            if (db != null) {
+                db.close();
+            }
+        }
+    }
+
+    // DELETE ARTICLE
+    public void deleteArticle(Article article) {
+        SQLiteDatabase db = null;
+
+        try {
+            db = dbHelper.getWritableDatabase();
+            int rowsDeleted = db.delete(
+                    NewsDatabaseHelper.TABLE_ARTICLES,
+                    NewsDatabaseHelper.COLUMN_URL + " = ?",
+                    new String[]{article.getUrl()}
+            );
+
+            Log.d(TAG, "Deleted " + rowsDeleted + " articles");
+        } catch (Exception e) {
+            Log.e(TAG, "Error deleting article", e);
+        } finally {
+            if (db != null) {
+                db.close();
+            }
+        }
+    }
+
+    // DELETE NON-FAVORITE ARTICLES
+    public void deleteNonFavoriteArticles() {
+        SQLiteDatabase db = null;
+
+        try {
+            db = dbHelper.getWritableDatabase();
+            int rowsDeleted = db.delete(
+                    NewsDatabaseHelper.TABLE_ARTICLES,
+                    NewsDatabaseHelper.COLUMN_IS_FAVORITE + " = 0",
+                    null
+            );
+
+            Log.d(TAG, "Deleted " + rowsDeleted + " non-favorite articles");
+        } catch (Exception e) {
+            Log.e(TAG, "Error deleting non-favorite articles", e);
+        } finally {
+            if (db != null) {
+                db.close();
+            }
+        }
+    }
+
+    // GET ARTICLE BY URL
+    public Article getArticleByUrl(String url) {
+        SQLiteDatabase db = null;
+        Cursor cursor = null;
 
-    @Query("SELECT * FROM articles WHERE isFavorite = 1 ORDER BY timestamp DESC")
-    List<Article> getFavoriteArticles();
+        try {
+            db = dbHelper.getReadableDatabase();
+            String query = "SELECT * FROM " + NewsDatabaseHelper.TABLE_ARTICLES +
+                    " WHERE " + NewsDatabaseHelper.COLUMN_URL + " = ? LIMIT 1";
 
-    @Query("SELECT * FROM articles WHERE title LIKE '%' || :query || '%' OR description LIKE '%' || :query || '%'")
-    List<Article> searchArticles(String query);
+            cursor = db.rawQuery(query, new String[]{url});
 
-    @Insert(onConflict = OnConflictStrategy.REPLACE)
-    void insertArticle(Article article);
+            if (cursor.moveToFirst()) {
+                Article article = cursorToArticle(cursor);
+                Log.d(TAG, "Found article by URL: " + url);
+                return article;
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "Error getting article by URL", e);
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+            if (db != null) {
+                db.close();
+            }
+        }
 
-    @Insert(onConflict = OnConflictStrategy.REPLACE)
-    void insertArticles(List<Article> articles);
+        return null;
+    }
 
-    @Update
-    void updateArticle(Article article);
+    // HELPER: Convert Cursor to Article object
+    private Article cursorToArticle(Cursor cursor) {
+        try {
+            Article article = new Article();
 
-    @Delete
-    void deleteArticle(Article article);
+            article.setId(cursor.getInt(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_ID)));
+            article.setTitle(cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_TITLE)));
+            article.setDescription(cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_DESCRIPTION)));
+            article.setUrl(cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_URL)));
+            article.setUrlToImage(cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_URL_TO_IMAGE)));
+            article.setPublishedAt(cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_PUBLISHED_AT)));
+            article.setContent(cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_CONTENT)));
+            article.setAuthor(cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_AUTHOR)));
 
-    @Query("DELETE FROM articles WHERE isFavorite = 0")
-    void deleteNonFavoriteArticles();
+            // Create Source object
+            String sourceId = cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_SOURCE_ID));
+            String sourceName = cursor.getString(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_SOURCE_NAME));
+            if (sourceId != null || sourceName != null) {
+                Source source = new Source(sourceId, sourceName);
+                article.setSource(source);
+            }
 
-    @Query("SELECT * FROM articles WHERE url = :url LIMIT 1")
-    Article getArticleByUrl(String url);
+            article.setFavorite(cursor.getInt(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_IS_FAVORITE)) == 1);
+            article.setTimestamp(cursor.getLong(cursor.getColumnIndexOrThrow(NewsDatabaseHelper.COLUMN_TIMESTAMP)));
+
+            return article;
+
+        } catch (Exception e) {
+            Log.e(TAG, "Error converting cursor to article", e);
+            return null;
+        }
+    }
+
+    // HELPER: Convert Article to ContentValues
+    private ContentValues articleToContentValues(Article article) {
+        ContentValues values = new ContentValues();
+
+        values.put(NewsDatabaseHelper.COLUMN_TITLE, article.getTitle());
+        values.put(NewsDatabaseHelper.COLUMN_DESCRIPTION, article.getDescription());
+        values.put(NewsDatabaseHelper.COLUMN_URL, article.getUrl());
+        values.put(NewsDatabaseHelper.COLUMN_URL_TO_IMAGE, article.getUrlToImage());
+        values.put(NewsDatabaseHelper.COLUMN_PUBLISHED_AT, article.getPublishedAt());
+        values.put(NewsDatabaseHelper.COLUMN_CONTENT, article.getContent());
+        values.put(NewsDatabaseHelper.COLUMN_AUTHOR, article.getAuthor());
+
+        // Handle Source object - flatten to separate columns
+        if (article.getSource() != null) {
+            values.put(NewsDatabaseHelper.COLUMN_SOURCE_ID, article.getSource().getId());
+            values.put(NewsDatabaseHelper.COLUMN_SOURCE_NAME, article.getSource().getName());
+        } else {
+            values.putNull(NewsDatabaseHelper.COLUMN_SOURCE_ID);
+            values.putNull(NewsDatabaseHelper.COLUMN_SOURCE_NAME);
+        }
+
+        values.put(NewsDatabaseHelper.COLUMN_IS_FAVORITE, article.isFavorite() ? 1 : 0);
+        values.put(NewsDatabaseHelper.COLUMN_TIMESTAMP, article.getTimestamp());
+
+        return values;
+    }
 }
\ No newline at end of file
Index: app/src/main/res/drawable/ic_launcher_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:width=\"108dp\"\n    android:height=\"108dp\"\n    android:viewportWidth=\"108\"\n    android:viewportHeight=\"108\">\n    <path\n        android:fillColor=\"#3DDC84\"\n        android:pathData=\"M0,0h108v108h-108z\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M9,0L9,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M19,0L19,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M29,0L29,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M39,0L39,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M49,0L49,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M59,0L59,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M69,0L69,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M79,0L79,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M89,0L89,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M99,0L99,108\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,9L108,9\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,19L108,19\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,29L108,29\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,39L108,39\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,49L108,49\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,59L108,59\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,69L108,69\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,79L108,79\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,89L108,89\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M0,99L108,99\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M19,29L89,29\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M19,39L89,39\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M19,49L89,49\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M19,59L89,59\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M19,69L89,69\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M19,79L89,79\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M29,19L29,89\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M39,19L39,89\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M49,19L49,89\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M59,19L59,89\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M69,19L69,89\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n    <path\n        android:fillColor=\"#00000000\"\n        android:pathData=\"M79,19L79,89\"\n        android:strokeWidth=\"0.8\"\n        android:strokeColor=\"#33FFFFFF\" />\n</vector>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_launcher_background.xml b/app/src/main/res/drawable/ic_launcher_background.xml
--- a/app/src/main/res/drawable/ic_launcher_background.xml	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/res/drawable/ic_launcher_background.xml	(date 1748355739202)
@@ -1,170 +1,74 @@
 <?xml version="1.0" encoding="utf-8"?>
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="108dp"
+<vector
     android:height="108dp"
+    android:width="108dp"
+    android:viewportHeight="108"
     android:viewportWidth="108"
-    android:viewportHeight="108">
-    <path
-        android:fillColor="#3DDC84"
-        android:pathData="M0,0h108v108h-108z" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M9,0L9,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M19,0L19,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M29,0L29,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M39,0L39,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M49,0L49,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M59,0L59,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M69,0L69,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M79,0L79,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M89,0L89,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M99,0L99,108"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,9L108,9"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,19L108,19"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,29L108,29"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,39L108,39"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,49L108,49"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,59L108,59"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,69L108,69"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,79L108,79"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,89L108,89"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M0,99L108,99"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M19,29L89,29"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M19,39L89,39"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M19,49L89,49"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M19,59L89,59"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M19,69L89,69"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M19,79L89,79"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M29,19L29,89"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M39,19L39,89"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M49,19L49,89"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M59,19L59,89"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M69,19L69,89"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
-    <path
-        android:fillColor="#00000000"
-        android:pathData="M79,19L79,89"
-        android:strokeWidth="0.8"
-        android:strokeColor="#33FFFFFF" />
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#3DDC84"
+          android:pathData="M0,0h108v108h-108z"/>
+    <path android:fillColor="#00000000" android:pathData="M9,0L9,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M19,0L19,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M29,0L29,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M39,0L39,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M49,0L49,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M59,0L59,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M69,0L69,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M79,0L79,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M89,0L89,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M99,0L99,108"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,9L108,9"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,19L108,19"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,29L108,29"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,39L108,39"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,49L108,49"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,59L108,59"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,69L108,69"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,79L108,79"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,89L108,89"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M0,99L108,99"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M19,29L89,29"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M19,39L89,39"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M19,49L89,49"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M19,59L89,59"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M19,69L89,69"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M19,79L89,79"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M29,19L29,89"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M39,19L39,89"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M49,19L49,89"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M59,19L59,89"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M69,19L69,89"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
+    <path android:fillColor="#00000000" android:pathData="M79,19L79,89"
+          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
 </vector>
Index: app/src/main/java/com/example/snapnews/fragment/FavoritesFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snapnews.fragment;\n\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport com.example.snapnews.adapter.NewsAdapter;\nimport com.example.snapnews.database.ArticleDao;\nimport com.example.snapnews.database.NewsDatabase;\nimport com.example.snapnews.databinding.FragmentFavoritesBinding;\nimport com.example.snapnews.models.Article;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class FavoritesFragment extends Fragment {\n    private FragmentFavoritesBinding binding;\n    private NewsAdapter newsAdapter;\n    private List<Article> favoriteArticles = new ArrayList<>();\n    private ArticleDao articleDao;\n    private ExecutorService executorService;\n    private Handler mainHandler;\n\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        binding = FragmentFavoritesBinding.inflate(inflater, container, false);\n        return binding.getRoot();\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        initializeComponents();\n        setupRecyclerView();\n        loadFavorites();\n    }\n\n    private void initializeComponents() {\n        NewsDatabase database = NewsDatabase.getDatabase(requireContext());\n        articleDao = database.articleDao();\n        executorService = Executors.newFixedThreadPool(1);\n        mainHandler = new Handler(Looper.getMainLooper());\n    }\n\n    private void setupRecyclerView() {\n        newsAdapter = new NewsAdapter(favoriteArticles, article -> {\n            if (getActivity() != null) {\n                ((com.example.snapnews.activity.MainActivity) getActivity()).navigateToDetail(article);\n            }\n        });\n\n        binding.recyclerViewFavorites.setLayoutManager(new LinearLayoutManager(getContext()));\n        binding.recyclerViewFavorites.setAdapter(newsAdapter);\n    }\n\n    private void loadFavorites() {\n        showLoading();\n\n        executorService.execute(() -> {\n            List<Article> favorites = articleDao.getFavoriteArticles();\n\n            mainHandler.post(() -> {\n                hideLoading();\n\n                favoriteArticles.clear();\n                if (favorites != null) {\n                    favoriteArticles.addAll(favorites);\n                }\n                newsAdapter.notifyDataSetChanged();\n\n                if (favoriteArticles.isEmpty()) {\n                    showEmptyState();\n                } else {\n                    showContent();\n                }\n            });\n        });\n    }\n\n    private void showLoading() {\n        binding.progressBar.setVisibility(View.VISIBLE);\n        binding.recyclerViewFavorites.setVisibility(View.GONE);\n        binding.layoutEmpty.setVisibility(View.GONE);\n    }\n\n    private void hideLoading() {\n        binding.progressBar.setVisibility(View.GONE);\n    }\n\n    private void showContent() {\n        binding.recyclerViewFavorites.setVisibility(View.VISIBLE);\n        binding.layoutEmpty.setVisibility(View.GONE);\n    }\n\n    private void showEmptyState() {\n        binding.recyclerViewFavorites.setVisibility(View.GONE);\n        binding.layoutEmpty.setVisibility(View.VISIBLE);\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        // Refresh favorites when fragment becomes visible\n        loadFavorites();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (executorService != null && !executorService.isShutdown()) {\n            executorService.shutdown();\n        }\n        binding = null;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/fragment/FavoritesFragment.java b/app/src/main/java/com/example/snapnews/fragment/FavoritesFragment.java
--- a/app/src/main/java/com/example/snapnews/fragment/FavoritesFragment.java	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/java/com/example/snapnews/fragment/FavoritesFragment.java	(date 1748350142684)
@@ -3,6 +3,7 @@
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.Looper;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -12,7 +13,7 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import com.example.snapnews.adapter.NewsAdapter;
 import com.example.snapnews.database.ArticleDao;
-import com.example.snapnews.database.NewsDatabase;
+import com.example.snapnews.database.NewsDatabaseHelper;
 import com.example.snapnews.databinding.FragmentFavoritesBinding;
 import com.example.snapnews.models.Article;
 import java.util.ArrayList;
@@ -21,10 +22,12 @@
 import java.util.concurrent.Executors;
 
 public class FavoritesFragment extends Fragment {
+    private static final String TAG = "FavoritesFragment";
     private FragmentFavoritesBinding binding;
     private NewsAdapter newsAdapter;
     private List<Article> favoriteArticles = new ArrayList<>();
     private ArticleDao articleDao;
+    private NewsDatabaseHelper dbHelper;
     private ExecutorService executorService;
     private Handler mainHandler;
 
@@ -44,10 +47,14 @@
     }
 
     private void initializeComponents() {
-        NewsDatabase database = NewsDatabase.getDatabase(requireContext());
-        articleDao = database.articleDao();
+        // PERUBAHAN: Inisialisasi SQLite Database Helper
+        dbHelper = NewsDatabaseHelper.getInstance(requireContext());
+        articleDao = new ArticleDao(dbHelper);
+
         executorService = Executors.newFixedThreadPool(1);
         mainHandler = new Handler(Looper.getMainLooper());
+
+        Log.d(TAG, "Components initialized with SQLite database");
     }
 
     private void setupRecyclerView() {
@@ -59,55 +66,106 @@
 
         binding.recyclerViewFavorites.setLayoutManager(new LinearLayoutManager(getContext()));
         binding.recyclerViewFavorites.setAdapter(newsAdapter);
+
+        Log.d(TAG, "RecyclerView setup completed");
     }
 
     private void loadFavorites() {
         showLoading();
 
+        // PERUBAHAN: Menggunakan SQLite langsung tanpa Room
         executorService.execute(() -> {
-            List<Article> favorites = articleDao.getFavoriteArticles();
+            Log.d(TAG, "Loading favorite articles from SQLite database");
+
+            try {
+                List<Article> favorites = articleDao.getFavoriteArticles();
 
-            mainHandler.post(() -> {
-                hideLoading();
+                mainHandler.post(() -> {
+                    hideLoading();
 
-                favoriteArticles.clear();
-                if (favorites != null) {
-                    favoriteArticles.addAll(favorites);
-                }
-                newsAdapter.notifyDataSetChanged();
-
-                if (favoriteArticles.isEmpty()) {
+                    favoriteArticles.clear();
+                    if (favorites != null && !favorites.isEmpty()) {
+                        Log.d(TAG, "Loaded " + favorites.size() + " favorite articles from SQLite");
+                        favoriteArticles.addAll(favorites);
+                        newsAdapter.notifyDataSetChanged();
+                        showContent();
+                    } else {
+                        Log.d(TAG, "No favorite articles found in SQLite database");
+                        showEmptyState();
+                    }
+                });
+
+            } catch (Exception e) {
+                Log.e(TAG, "Error loading favorite articles from SQLite", e);
+                mainHandler.post(() -> {
+                    hideLoading();
                     showEmptyState();
-                } else {
-                    showContent();
-                }
-            });
+                });
+            }
+        });
+    }
+
+    // Method untuk menambah/menghapus favorite (dipanggil dari DetailActivity)
+    public void toggleFavorite(Article article) {
+        executorService.execute(() -> {
+            try {
+                Log.d(TAG, "Toggling favorite status for article: " + article.getTitle());
+
+                // Toggle status favorite
+                article.setFavorite(!article.isFavorite());
+
+                // Update di database SQLite
+                articleDao.updateArticle(article);
+
+                Log.d(TAG, "Article favorite status updated in SQLite: " + article.isFavorite());
+
+                // Refresh tampilan di main thread
+                mainHandler.post(() -> {
+                    loadFavorites();
+                });
+
+            } catch (Exception e) {
+                Log.e(TAG, "Error toggling favorite status in SQLite", e);
+            }
         });
     }
 
     private void showLoading() {
-        binding.progressBar.setVisibility(View.VISIBLE);
-        binding.recyclerViewFavorites.setVisibility(View.GONE);
-        binding.layoutEmpty.setVisibility(View.GONE);
+        Log.d(TAG, "Showing loading state");
+        if (binding != null) {
+            binding.progressBar.setVisibility(View.VISIBLE);
+            binding.recyclerViewFavorites.setVisibility(View.GONE);
+            binding.layoutEmpty.setVisibility(View.GONE);
+        }
     }
 
     private void hideLoading() {
-        binding.progressBar.setVisibility(View.GONE);
+        Log.d(TAG, "Hiding loading state");
+        if (binding != null) {
+            binding.progressBar.setVisibility(View.GONE);
+        }
     }
 
     private void showContent() {
-        binding.recyclerViewFavorites.setVisibility(View.VISIBLE);
-        binding.layoutEmpty.setVisibility(View.GONE);
+        Log.d(TAG, "Showing content - Favorite articles count: " + favoriteArticles.size());
+        if (binding != null) {
+            binding.recyclerViewFavorites.setVisibility(View.VISIBLE);
+            binding.layoutEmpty.setVisibility(View.GONE);
+        }
     }
 
     private void showEmptyState() {
-        binding.recyclerViewFavorites.setVisibility(View.GONE);
-        binding.layoutEmpty.setVisibility(View.VISIBLE);
+        Log.d(TAG, "Showing empty state");
+        if (binding != null) {
+            binding.recyclerViewFavorites.setVisibility(View.GONE);
+            binding.layoutEmpty.setVisibility(View.VISIBLE);
+        }
     }
 
     @Override
     public void onResume() {
         super.onResume();
+        Log.d(TAG, "Fragment resumed - refreshing favorites from SQLite");
         // Refresh favorites when fragment becomes visible
         loadFavorites();
     }
@@ -119,5 +177,6 @@
             executorService.shutdown();
         }
         binding = null;
+        Log.d(TAG, "FavoritesFragment destroyed - SQLite connections will be closed automatically");
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/fragment/SearchFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snapnews.fragment;\n\nimport android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport com.example.snapnews.adapter.NewsAdapter;\nimport com.example.snapnews.database.ArticleDao;\nimport com.example.snapnews.database.NewsDatabase;\nimport com.example.snapnews.databinding.FragmentSearchBinding;\nimport com.example.snapnews.models.Article;\nimport com.example.snapnews.models.NewsResponse;\nimport com.example.snapnews.network.RetrofitClient;\nimport com.example.snapnews.network.NewsApiService;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\nimport java.util.ArrayList;\nimport java.util.List;\nimport com.example.snapnews.utils.ApiKeyManager;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SearchFragment extends Fragment {\n    private FragmentSearchBinding binding;\n    private NewsAdapter newsAdapter;\n    private List<Article> searchResults = new ArrayList<>();\n    private NewsApiService newsApiService;\n    private ArticleDao articleDao;\n    private ExecutorService executorService;\n    private Handler mainHandler;\n    private Handler searchHandler;\n    private Runnable searchRunnable;\n    private String currentQuery = \"\";\n\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        binding = FragmentSearchBinding.inflate(inflater, container, false);\n        return binding.getRoot();\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        initializeComponents();\n        setupRecyclerView();\n        setupSearchView();\n        showInitialState();\n    }\n\n    private void initializeComponents() {\n        newsApiService = RetrofitClient.getNewsApiService();\n        NewsDatabase database = NewsDatabase.getDatabase(requireContext());\n        articleDao = database.articleDao();\n        executorService = Executors.newFixedThreadPool(2);\n        mainHandler = new Handler(Looper.getMainLooper());\n        searchHandler = new Handler(Looper.getMainLooper());\n    }\n\n    private void setupRecyclerView() {\n        newsAdapter = new NewsAdapter(searchResults, article -> {\n            if (getActivity() != null) {\n                ((com.example.snapnews.activity.MainActivity) getActivity()).navigateToDetail(article);\n            }\n        });\n\n        binding.recyclerViewSearch.setLayoutManager(new LinearLayoutManager(getContext()));\n        binding.recyclerViewSearch.setAdapter(newsAdapter);\n    }\n\n    private void setupSearchView() {\n        binding.editTextSearch.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n            @Override\n            public void afterTextChanged(Editable s) {\n                String query = s.toString().trim();\n\n                // Cancel previous search\n                if (searchRunnable != null) {\n                    searchHandler.removeCallbacks(searchRunnable);\n                }\n\n                if (query.isEmpty()) {\n                    showInitialState();\n                    return;\n                }\n\n                // Delay search to avoid too many API calls\n                searchRunnable = () -> performSearch(query);\n                searchHandler.postDelayed(searchRunnable, 500);\n            }\n        });\n\n        binding.buttonSearch.setOnClickListener(v -> {\n            String query = binding.editTextSearch.getText().toString().trim();\n            if (!query.isEmpty()) {\n                performSearch(query);\n            }\n        });\n    }\n\n    private void performSearch(String query) {\n        if (query.equals(currentQuery)) return;\n\n        currentQuery = query;\n\n        if (isNetworkAvailable()) {\n            searchOnline(query);\n        } else {\n            searchOffline(query);\n        }\n    }\n\n    private void searchOnline(String query) {\n        showLoading();\n\n        Call<NewsResponse> call = newsApiService.searchNews(\n                query,\n                \"publishedAt\",\n                50,\n                1,\n                ApiKeyManager.getNewsApiKey()\n        );\n\n        call.enqueue(new Callback<NewsResponse>() {\n            @Override\n            public void onResponse(@NonNull Call<NewsResponse> call, @NonNull Response<NewsResponse> response) {\n                hideLoading();\n\n                if (response.isSuccessful() && response.body() != null) {\n                    NewsResponse newsResponse = response.body();\n\n                    if (\"ok\".equals(newsResponse.getStatus()) && newsResponse.getArticles() != null) {\n                        searchResults.clear();\n                        searchResults.addAll(newsResponse.getArticles());\n                        newsAdapter.notifyDataSetChanged();\n\n                        if (searchResults.isEmpty()) {\n                            showEmptyState(\"No results found\", \"Try searching with different keywords\");\n                        } else {\n                            showResults();\n                        }\n                    } else {\n                        showError(\"Search Error\", newsResponse.getMessage());\n                    }\n                } else {\n                    showError(\"Search Error\", \"Failed to search news\");\n                }\n            }\n\n            @Override\n            public void onFailure(@NonNull Call<NewsResponse> call, @NonNull Throwable t) {\n                hideLoading();\n                showError(\"Network Error\", \"Please check your internet connection\");\n                searchOffline(query);\n            }\n        });\n    }\n\n    private void searchOffline(String query) {\n        showLoading();\n\n        executorService.execute(() -> {\n            List<Article> results = articleDao.searchArticles(query);\n\n            mainHandler.post(() -> {\n                hideLoading();\n\n                searchResults.clear();\n                if (results != null) {\n                    searchResults.addAll(results);\n                }\n                newsAdapter.notifyDataSetChanged();\n\n                if (searchResults.isEmpty()) {\n                    showEmptyState(\"No offline results\", \"Connect to internet for more results\");\n                } else {\n                    showResults();\n                }\n            });\n        });\n    }\n\n    private void showInitialState() {\n        binding.layoutInitial.setVisibility(View.VISIBLE);\n        binding.recyclerViewSearch.setVisibility(View.GONE);\n        binding.progressBar.setVisibility(View.GONE);\n        binding.layoutEmpty.setVisibility(View.GONE);\n        searchResults.clear();\n        newsAdapter.notifyDataSetChanged();\n    }\n\n    private void showLoading() {\n        binding.layoutInitial.setVisibility(View.GONE);\n        binding.recyclerViewSearch.setVisibility(View.GONE);\n        binding.progressBar.setVisibility(View.VISIBLE);\n        binding.layoutEmpty.setVisibility(View.GONE);\n    }\n\n    private void hideLoading() {\n        binding.progressBar.setVisibility(View.GONE);\n    }\n\n    private void showResults() {\n        binding.layoutInitial.setVisibility(View.GONE);\n        binding.recyclerViewSearch.setVisibility(View.VISIBLE);\n        binding.layoutEmpty.setVisibility(View.GONE);\n    }\n\n    private void showEmptyState(String title, String message) {\n        binding.layoutInitial.setVisibility(View.GONE);\n        binding.recyclerViewSearch.setVisibility(View.GONE);\n        binding.layoutEmpty.setVisibility(View.VISIBLE);\n        binding.textEmptyTitle.setText(title);\n        binding.textEmptyMessage.setText(message);\n    }\n\n    private void showError(String title, String message) {\n        showEmptyState(title, message);\n    }\n\n    private boolean isNetworkAvailable() {\n        ConnectivityManager connectivityManager =\n                (ConnectivityManager) requireContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n        return activeNetworkInfo != null && activeNetworkInfo.isConnected();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (executorService != null && !executorService.isShutdown()) {\n            executorService.shutdown();\n        }\n        if (searchHandler != null && searchRunnable != null) {\n            searchHandler.removeCallbacks(searchRunnable);\n        }\n        binding = null;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/fragment/SearchFragment.java b/app/src/main/java/com/example/snapnews/fragment/SearchFragment.java
--- a/app/src/main/java/com/example/snapnews/fragment/SearchFragment.java	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/java/com/example/snapnews/fragment/SearchFragment.java	(date 1748350142689)
@@ -8,6 +8,7 @@
 import android.os.Looper;
 import android.text.Editable;
 import android.text.TextWatcher;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -17,7 +18,7 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import com.example.snapnews.adapter.NewsAdapter;
 import com.example.snapnews.database.ArticleDao;
-import com.example.snapnews.database.NewsDatabase;
+import com.example.snapnews.database.NewsDatabaseHelper;
 import com.example.snapnews.databinding.FragmentSearchBinding;
 import com.example.snapnews.models.Article;
 import com.example.snapnews.models.NewsResponse;
@@ -33,11 +34,13 @@
 import java.util.concurrent.Executors;
 
 public class SearchFragment extends Fragment {
+    private static final String TAG = "SearchFragment";
     private FragmentSearchBinding binding;
     private NewsAdapter newsAdapter;
     private List<Article> searchResults = new ArrayList<>();
     private NewsApiService newsApiService;
     private ArticleDao articleDao;
+    private NewsDatabaseHelper dbHelper;
     private ExecutorService executorService;
     private Handler mainHandler;
     private Handler searchHandler;
@@ -62,11 +65,16 @@
 
     private void initializeComponents() {
         newsApiService = RetrofitClient.getNewsApiService();
-        NewsDatabase database = NewsDatabase.getDatabase(requireContext());
-        articleDao = database.articleDao();
+
+        // PERUBAHAN: Inisialisasi SQLite Database Helper
+        dbHelper = NewsDatabaseHelper.getInstance(requireContext());
+        articleDao = new ArticleDao(dbHelper);
+
         executorService = Executors.newFixedThreadPool(2);
         mainHandler = new Handler(Looper.getMainLooper());
         searchHandler = new Handler(Looper.getMainLooper());
+
+        Log.d(TAG, "Components initialized with SQLite database");
     }
 
     private void setupRecyclerView() {
@@ -78,6 +86,8 @@
 
         binding.recyclerViewSearch.setLayoutManager(new LinearLayoutManager(getContext()));
         binding.recyclerViewSearch.setAdapter(newsAdapter);
+
+        Log.d(TAG, "RecyclerView setup completed");
     }
 
     private void setupSearchView() {
@@ -120,16 +130,19 @@
         if (query.equals(currentQuery)) return;
 
         currentQuery = query;
+        Log.d(TAG, "Performing search for: " + query);
 
         if (isNetworkAvailable()) {
             searchOnline(query);
         } else {
+            Log.w(TAG, "No network available, searching offline in SQLite");
             searchOffline(query);
         }
     }
 
     private void searchOnline(String query) {
         showLoading();
+        Log.d(TAG, "Searching online for: " + query);
 
         Call<NewsResponse> call = newsApiService.searchNews(
                 query,
@@ -142,12 +155,15 @@
         call.enqueue(new Callback<NewsResponse>() {
             @Override
             public void onResponse(@NonNull Call<NewsResponse> call, @NonNull Response<NewsResponse> response) {
+                Log.d(TAG, "Search API response received for query: " + query);
                 hideLoading();
 
                 if (response.isSuccessful() && response.body() != null) {
                     NewsResponse newsResponse = response.body();
 
                     if ("ok".equals(newsResponse.getStatus()) && newsResponse.getArticles() != null) {
+                        Log.d(TAG, "Search found " + newsResponse.getArticles().size() + " articles online");
+
                         searchResults.clear();
                         searchResults.addAll(newsResponse.getArticles());
                         newsAdapter.notifyDataSetChanged();
@@ -158,15 +174,18 @@
                             showResults();
                         }
                     } else {
+                        Log.e(TAG, "Search API error: " + newsResponse.getMessage());
                         showError("Search Error", newsResponse.getMessage());
                     }
                 } else {
+                    Log.e(TAG, "Search API response not successful: " + response.code());
                     showError("Search Error", "Failed to search news");
                 }
             }
 
             @Override
             public void onFailure(@NonNull Call<NewsResponse> call, @NonNull Throwable t) {
+                Log.e(TAG, "Search API call failed", t);
                 hideLoading();
                 showError("Network Error", "Please check your internet connection");
                 searchOffline(query);
@@ -176,71 +195,104 @@
 
     private void searchOffline(String query) {
         showLoading();
+        Log.d(TAG, "Searching offline in SQLite for: " + query);
 
+        // PERUBAHAN: Menggunakan SQLite langsung tanpa Room
         executorService.execute(() -> {
-            List<Article> results = articleDao.searchArticles(query);
+            try {
+                List<Article> results = articleDao.searchArticles(query);
 
-            mainHandler.post(() -> {
-                hideLoading();
+                mainHandler.post(() -> {
+                    hideLoading();
 
-                searchResults.clear();
-                if (results != null) {
-                    searchResults.addAll(results);
-                }
-                newsAdapter.notifyDataSetChanged();
-
-                if (searchResults.isEmpty()) {
-                    showEmptyState("No offline results", "Connect to internet for more results");
-                } else {
-                    showResults();
-                }
-            });
+                    searchResults.clear();
+                    if (results != null && !results.isEmpty()) {
+                        Log.d(TAG, "Found " + results.size() + " articles in SQLite for query: " + query);
+                        searchResults.addAll(results);
+                        newsAdapter.notifyDataSetChanged();
+                        showResults();
+                    } else {
+                        Log.d(TAG, "No offline results found in SQLite for query: " + query);
+                        showEmptyState("No offline results", "Connect to internet for more results");
+                    }
+                });
+
+            } catch (Exception e) {
+                Log.e(TAG, "Error searching in SQLite database", e);
+                mainHandler.post(() -> {
+                    hideLoading();
+                    showError("Database Error", "Error searching cached news");
+                });
+            }
         });
     }
 
     private void showInitialState() {
-        binding.layoutInitial.setVisibility(View.VISIBLE);
-        binding.recyclerViewSearch.setVisibility(View.GONE);
-        binding.progressBar.setVisibility(View.GONE);
-        binding.layoutEmpty.setVisibility(View.GONE);
-        searchResults.clear();
-        newsAdapter.notifyDataSetChanged();
+        Log.d(TAG, "Showing initial state");
+        if (binding != null) {
+            binding.layoutInitial.setVisibility(View.VISIBLE);
+            binding.recyclerViewSearch.setVisibility(View.GONE);
+            binding.progressBar.setVisibility(View.GONE);
+            binding.layoutEmpty.setVisibility(View.GONE);
+            searchResults.clear();
+            newsAdapter.notifyDataSetChanged();
+        }
     }
 
     private void showLoading() {
-        binding.layoutInitial.setVisibility(View.GONE);
-        binding.recyclerViewSearch.setVisibility(View.GONE);
-        binding.progressBar.setVisibility(View.VISIBLE);
-        binding.layoutEmpty.setVisibility(View.GONE);
+        Log.d(TAG, "Showing loading state");
+        if (binding != null) {
+            binding.layoutInitial.setVisibility(View.GONE);
+            binding.recyclerViewSearch.setVisibility(View.GONE);
+            binding.progressBar.setVisibility(View.VISIBLE);
+            binding.layoutEmpty.setVisibility(View.GONE);
+        }
     }
 
     private void hideLoading() {
-        binding.progressBar.setVisibility(View.GONE);
+        Log.d(TAG, "Hiding loading state");
+        if (binding != null) {
+            binding.progressBar.setVisibility(View.GONE);
+        }
     }
 
     private void showResults() {
-        binding.layoutInitial.setVisibility(View.GONE);
-        binding.recyclerViewSearch.setVisibility(View.VISIBLE);
-        binding.layoutEmpty.setVisibility(View.GONE);
+        Log.d(TAG, "Showing search results - Count: " + searchResults.size());
+        if (binding != null) {
+            binding.layoutInitial.setVisibility(View.GONE);
+            binding.recyclerViewSearch.setVisibility(View.VISIBLE);
+            binding.layoutEmpty.setVisibility(View.GONE);
+        }
     }
 
     private void showEmptyState(String title, String message) {
-        binding.layoutInitial.setVisibility(View.GONE);
-        binding.recyclerViewSearch.setVisibility(View.GONE);
-        binding.layoutEmpty.setVisibility(View.VISIBLE);
-        binding.textEmptyTitle.setText(title);
-        binding.textEmptyMessage.setText(message);
+        Log.d(TAG, "Showing empty state: " + title);
+        if (binding != null) {
+            binding.layoutInitial.setVisibility(View.GONE);
+            binding.recyclerViewSearch.setVisibility(View.GONE);
+            binding.layoutEmpty.setVisibility(View.VISIBLE);
+            binding.textEmptyTitle.setText(title);
+            binding.textEmptyMessage.setText(message);
+        }
     }
 
     private void showError(String title, String message) {
+        Log.e(TAG, "Showing error: " + title + " - " + message);
         showEmptyState(title, message);
     }
 
     private boolean isNetworkAvailable() {
-        ConnectivityManager connectivityManager =
-                (ConnectivityManager) requireContext().getSystemService(Context.CONNECTIVITY_SERVICE);
-        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
-        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
+        try {
+            ConnectivityManager connectivityManager =
+                    (ConnectivityManager) requireContext().getSystemService(Context.CONNECTIVITY_SERVICE);
+            NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
+            boolean result = activeNetworkInfo != null && activeNetworkInfo.isConnected();
+            Log.d(TAG, "Network available: " + result);
+            return result;
+        } catch (Exception e) {
+            Log.e(TAG, "Error checking network", e);
+            return false;
+        }
     }
 
     @Override
@@ -253,5 +305,6 @@
             searchHandler.removeCallbacks(searchRunnable);
         }
         binding = null;
+        Log.d(TAG, "SearchFragment destroyed - SQLite connections will be closed automatically");
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/fragment/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.snapnews.fragment;\n\nimport android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Toast;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.LinearLayoutManager;\n\nimport com.example.snapnews.network.RetrofitClient;\nimport com.example.snapnews.R;\nimport com.example.snapnews.adapter.FilterChipAdapter;\nimport com.example.snapnews.adapter.NewsAdapter;\nimport com.example.snapnews.database.ArticleDao;\nimport com.example.snapnews.database.NewsDatabase;\nimport com.example.snapnews.databinding.FragmentHomeBinding;\nimport com.example.snapnews.models.Article;\nimport com.example.snapnews.models.FilterChip;\nimport com.example.snapnews.models.NewsResponse;\nimport com.example.snapnews.network.NewsApiService;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\nimport java.util.ArrayList;\nimport java.util.List;\nimport com.example.snapnews.utils.ApiKeyManager;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class HomeFragment extends Fragment {\n    private static final String TAG = \"HomeFragment\";\n    private FragmentHomeBinding binding;\n    private NewsAdapter newsAdapter;\n    private FilterChipAdapter filterChipAdapter;\n    private List<Article> articles = new ArrayList<>();\n    private List<FilterChip> filterChips = new ArrayList<>();\n    private NewsApiService newsApiService;\n    private ArticleDao articleDao;\n    private ExecutorService executorService;\n    private Handler mainHandler;\n    private FilterChip currentFilter;\n\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        binding = FragmentHomeBinding.inflate(inflater, container, false);\n        return binding.getRoot();\n    }\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        initializeComponents();\n        setupFilterChips();\n        setupRecyclerViews();\n        setupSwipeRefresh();\n        loadNews();\n    }\n\n    private void initializeComponents() {\n        newsApiService = RetrofitClient.getNewsApiService();\n        NewsDatabase database = NewsDatabase.getDatabase(requireContext());\n        articleDao = database.articleDao();\n        executorService = Executors.newFixedThreadPool(2);\n        mainHandler = new Handler(Looper.getMainLooper());\n        Log.d(TAG, \"Components initialized\");\n    }\n\n    private void setupFilterChips() {\n        filterChips.clear();\n\n        filterChips.add(new FilterChip(\"Latest\", null, \"us\"));\n        filterChips.add(new FilterChip(\"Business\", \"business\", \"us\"));\n        filterChips.add(new FilterChip(\"Technology\", \"technology\", \"us\"));\n        filterChips.add(new FilterChip(\"Entertainment\", \"entertainment\", \"us\"));\n        filterChips.add(new FilterChip(\"Sports\", \"sports\", \"us\"));\n        filterChips.add(new FilterChip(\"Health\", \"health\", \"us\"));\n\n        currentFilter = filterChips.get(0);\n        currentFilter.setSelected(true);\n\n        filterChipAdapter = new FilterChipAdapter(filterChips, new FilterChipAdapter.OnChipClickListener() {\n            @Override\n            public void onChipClick(FilterChip filterChip, int position) {\n                Log.d(TAG, \"Filter clicked: \" + filterChip.getName());\n                onFilterChipClicked(filterChip, position);\n            }\n        });\n\n        Log.d(TAG, \"Filter chips setup completed with \" + filterChips.size() + \" chips\");\n    }\n\n    private void setupRecyclerViews() {\n        LinearLayoutManager chipLayoutManager = new LinearLayoutManager(\n                getContext(), LinearLayoutManager.HORIZONTAL, false);\n        binding.recyclerViewFilterChips.setLayoutManager(chipLayoutManager);\n        binding.recyclerViewFilterChips.setAdapter(filterChipAdapter);\n\n        newsAdapter = new NewsAdapter(articles, article -> {\n            if (getActivity() != null) {\n                ((com.example.snapnews.activity.MainActivity) getActivity()).navigateToDetail(article);\n            }\n        });\n\n        binding.recyclerViewNews.setLayoutManager(new LinearLayoutManager(getContext()));\n        binding.recyclerViewNews.setAdapter(newsAdapter);\n\n        Log.d(TAG, \"RecyclerViews setup completed\");\n    }\n\n    private void setupSwipeRefresh() {\n        binding.swipeRefreshLayout.setOnRefreshListener(() -> {\n            Log.d(TAG, \"Swipe refresh triggered - forcing API call\");\n            // Force API call on swipe refresh\n            loadNewsFromApi();\n        });\n\n        binding.swipeRefreshLayout.setColorSchemeResources(\n                R.color.primary_color,\n                R.color.secondary_color\n        );\n    }\n\n    private void onFilterChipClicked(FilterChip filterChip, int position) {\n        Log.d(TAG, \"=== FILTER CHANGE TRIGGERED ===\");\n        Log.d(TAG, \"Old filter: \" + (currentFilter != null ? currentFilter.getName() : \"null\"));\n        Log.d(TAG, \"New filter: \" + filterChip.getName());\n        Log.d(TAG, \"Position: \" + position);\n\n        currentFilter = filterChip;\n\n        // Clear existing articles to show change immediately\n        articles.clear();\n        newsAdapter.notifyDataSetChanged();\n\n        // FORCE API CALL regardless of network status for testing\n        Log.d(TAG, \"FORCING API CALL for filter test\");\n        loadNewsFromApi();\n    }\n\n    private void loadNews() {\n        Log.d(TAG, \"=== LOADING NEWS ===\");\n        Log.d(TAG, \"Current filter: \" + (currentFilter != null ? currentFilter.getName() : \"null\"));\n\n        // Check network with detailed logging\n        boolean networkAvailable = isNetworkAvailable();\n        Log.d(TAG, \"Network check result: \" + networkAvailable);\n\n        if (networkAvailable) {\n            loadNewsFromApi();\n        } else {\n            Log.w(TAG, \"No network available, loading from database\");\n            loadNewsFromDatabase();\n        }\n    }\n\n    private void loadNewsFromApi() {\n        showLoading();\n\n        String category = currentFilter.getCategory();\n        String country = currentFilter.getCountry();\n\n        Log.d(TAG, \"=== API CALL DETAILS ===\");\n        Log.d(TAG, \"Filter: \" + currentFilter.getName());\n        Log.d(TAG, \"Category: \" + category);\n        Log.d(TAG, \"Country: \" + country);\n\n        Call<NewsResponse> call = newsApiService.getTopHeadlines(\n                country,\n                category,\n                20,\n                1,\n                ApiKeyManager.getNewsApiKey()\n        );\n\n        String url = call.request().url().toString();\n        Log.d(TAG, \"Full API URL: \" + url);\n\n        call.enqueue(new Callback<NewsResponse>() {\n            @Override\n            public void onResponse(@NonNull Call<NewsResponse> call, @NonNull Response<NewsResponse> response) {\n                Log.d(TAG, \"=== API RESPONSE ===\");\n                Log.d(TAG, \"Response code: \" + response.code());\n                Log.d(TAG, \"Response successful: \" + response.isSuccessful());\n\n                hideLoading();\n\n                if (response.isSuccessful() && response.body() != null) {\n                    NewsResponse newsResponse = response.body();\n                    Log.d(TAG, \"Response status: \" + newsResponse.getStatus());\n                    Log.d(TAG, \"Total results: \" + newsResponse.getTotalResults());\n\n                    if (\"ok\".equals(newsResponse.getStatus()) && newsResponse.getArticles() != null) {\n                        int articleCount = newsResponse.getArticles().size();\n                        Log.d(TAG, \"Articles received: \" + articleCount);\n\n                        // Clear and add new articles\n                        articles.clear();\n                        articles.addAll(newsResponse.getArticles());\n\n                        Log.d(TAG, \"Articles added to list. Current list size: \" + articles.size());\n\n                        // Notify adapter\n                        newsAdapter.notifyDataSetChanged();\n                        Log.d(TAG, \"Adapter notified\");\n\n                        // Save to database\n                        saveArticlesToDatabase(newsResponse.getArticles());\n\n                        showContent();\n\n                        // Show success message with filter name\n                        String message = \"✅ \" + currentFilter.getName() + \": \" + articleCount + \" articles loaded\";\n                        Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();\n                        Log.d(TAG, message);\n\n                    } else {\n                        String errorMsg = \"API returned error - Status: \" + newsResponse.getStatus();\n                        if (newsResponse.getMessage() != null) {\n                            errorMsg += \", Message: \" + newsResponse.getMessage();\n                        }\n                        Log.e(TAG, errorMsg);\n                        handleApiError(newsResponse.getMessage());\n                    }\n                } else {\n                    String errorMsg = \"Response not successful - Code: \" + response.code();\n                    Log.e(TAG, errorMsg);\n\n                    try {\n                        if (response.errorBody() != null) {\n                            String errorBody = response.errorBody().string();\n                            Log.e(TAG, \"Error body: \" + errorBody);\n                        }\n                    } catch (Exception e) {\n                        Log.e(TAG, \"Error reading error body\", e);\n                    }\n\n                    handleApiError(\"Failed to load \" + currentFilter.getName() + \" news\");\n                }\n            }\n\n            @Override\n            public void onFailure(@NonNull Call<NewsResponse> call, @NonNull Throwable t) {\n                Log.e(TAG, \"=== API CALL FAILED ===\", t);\n                hideLoading();\n                handleNetworkError();\n            }\n        });\n    }\n\n    private void loadNewsFromDatabase() {\n        showLoading();\n\n        executorService.execute(() -> {\n            Log.d(TAG, \"Loading news from database\");\n            List<Article> cachedArticles = articleDao.getAllArticles();\n\n            mainHandler.post(() -> {\n                hideLoading();\n\n                if (cachedArticles != null && !cachedArticles.isEmpty()) {\n                    Log.d(TAG, \"Loaded \" + cachedArticles.size() + \" articles from database\");\n                    articles.clear();\n                    articles.addAll(cachedArticles);\n                    newsAdapter.notifyDataSetChanged();\n                    showContent();\n\n                    String message = \"\uD83D\uDCF1 Offline: showing cached \" + currentFilter.getName() + \" news\";\n                    Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();\n                } else {\n                    Log.w(TAG, \"No cached articles found\");\n                    showError(\"No cached news available\", \"Connect to internet and pull down to refresh\");\n                }\n            });\n        });\n    }\n\n    private void saveArticlesToDatabase(List<Article> articles) {\n        executorService.execute(() -> {\n            try {\n                Log.d(TAG, \"Saving \" + articles.size() + \" articles to database\");\n                // Don't clear old articles, just add new ones\n                articleDao.insertArticles(articles);\n                Log.d(TAG, \"Articles saved successfully\");\n            } catch (Exception e) {\n                Log.e(TAG, \"Error saving articles to database\", e);\n            }\n        });\n    }\n\n    private void showLoading() {\n        Log.d(TAG, \"Showing loading state\");\n        if (binding != null) {\n            binding.progressBar.setVisibility(View.VISIBLE);\n            binding.recyclerViewNews.setVisibility(View.GONE);\n            binding.layoutError.setVisibility(View.GONE);\n            binding.swipeRefreshLayout.setRefreshing(false);\n        }\n    }\n\n    private void hideLoading() {\n        Log.d(TAG, \"Hiding loading state\");\n        if (binding != null) {\n            binding.progressBar.setVisibility(View.GONE);\n            binding.swipeRefreshLayout.setRefreshing(false);\n        }\n    }\n\n    private void showContent() {\n        Log.d(TAG, \"Showing content - Articles count: \" + articles.size());\n        if (binding != null) {\n            binding.recyclerViewNews.setVisibility(View.VISIBLE);\n            binding.layoutError.setVisibility(View.GONE);\n        }\n    }\n\n    private void showError(String title, String message) {\n        Log.d(TAG, \"Showing error: \" + title + \" - \" + message);\n        if (binding != null) {\n            binding.recyclerViewNews.setVisibility(View.GONE);\n            binding.layoutError.setVisibility(View.VISIBLE);\n            binding.textErrorTitle.setText(title);\n            binding.textErrorMessage.setText(message);\n\n            binding.buttonRetry.setOnClickListener(v -> {\n                binding.layoutError.setVisibility(View.GONE);\n                loadNews();\n            });\n        }\n    }\n\n    private void handleApiError(String message) {\n        Log.e(TAG, \"Handling API error: \" + message);\n\n        if (message != null && message.toLowerCase().contains(\"api key\")) {\n            showError(\"API Key Error\", \"Please check your API key configuration\");\n        } else {\n            showError(\"Server Error\", message != null ? message : \"Failed to load news\");\n        }\n\n        loadNewsFromDatabase();\n    }\n\n    private void handleNetworkError() {\n        Log.e(TAG, \"Handling network error\");\n        showError(\"Network Error\", \"Please check your internet connection\");\n        loadNewsFromDatabase();\n    }\n\n    private boolean isNetworkAvailable() {\n        try {\n            ConnectivityManager connectivityManager =\n                    (ConnectivityManager) requireContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n\n            if (connectivityManager == null) {\n                Log.e(TAG, \"ConnectivityManager is null\");\n                return false;\n            }\n\n            NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n            Log.d(TAG, \"NetworkInfo: \" + activeNetworkInfo);\n\n            boolean isConnected = activeNetworkInfo != null && activeNetworkInfo.isConnected();\n            boolean isAvailable = activeNetworkInfo != null && activeNetworkInfo.isAvailable();\n\n            Log.d(TAG, \"Network connected: \" + isConnected);\n            Log.d(TAG, \"Network available: \" + isAvailable);\n            Log.d(TAG, \"Network type: \" + (activeNetworkInfo != null ? activeNetworkInfo.getTypeName() : \"null\"));\n\n            // Try both conditions\n            boolean result = isConnected && isAvailable;\n            Log.d(TAG, \"Final network result: \" + result);\n\n            return result;\n\n        } catch (Exception e) {\n            Log.e(TAG, \"Error checking network\", e);\n            return false;\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (executorService != null && !executorService.isShutdown()) {\n            executorService.shutdown();\n        }\n        binding = null;\n        Log.d(TAG, \"HomeFragment destroyed\");\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/fragment/HomeFragment.java b/app/src/main/java/com/example/snapnews/fragment/HomeFragment.java
--- a/app/src/main/java/com/example/snapnews/fragment/HomeFragment.java	(revision cccc8a01370e36e1f7b022d10b30a3cd92ad9105)
+++ b/app/src/main/java/com/example/snapnews/fragment/HomeFragment.java	(date 1748350142694)
@@ -21,7 +21,7 @@
 import com.example.snapnews.adapter.FilterChipAdapter;
 import com.example.snapnews.adapter.NewsAdapter;
 import com.example.snapnews.database.ArticleDao;
-import com.example.snapnews.database.NewsDatabase;
+import com.example.snapnews.database.NewsDatabaseHelper;
 import com.example.snapnews.databinding.FragmentHomeBinding;
 import com.example.snapnews.models.Article;
 import com.example.snapnews.models.FilterChip;
@@ -44,7 +44,11 @@
     private List<Article> articles = new ArrayList<>();
     private List<FilterChip> filterChips = new ArrayList<>();
     private NewsApiService newsApiService;
+
+    // PERUBAHAN: Menggunakan NewsDatabaseHelper
     private ArticleDao articleDao;
+    private NewsDatabaseHelper dbHelper; // GANTI dari NewsDatabase ke NewsDatabaseHelper
+
     private ExecutorService executorService;
     private Handler mainHandler;
     private FilterChip currentFilter;
@@ -68,11 +72,14 @@
 
     private void initializeComponents() {
         newsApiService = RetrofitClient.getNewsApiService();
-        NewsDatabase database = NewsDatabase.getDatabase(requireContext());
-        articleDao = database.articleDao();
+
+        // PERUBAHAN: Inisialisasi NewsDatabaseHelper
+        dbHelper = NewsDatabaseHelper.getInstance(requireContext());
+        articleDao = new ArticleDao(dbHelper);
+
         executorService = Executors.newFixedThreadPool(2);
         mainHandler = new Handler(Looper.getMainLooper());
-        Log.d(TAG, "Components initialized");
+        Log.d(TAG, "Components initialized with NewsDatabaseHelper");
     }
 
     private void setupFilterChips() {
@@ -120,7 +127,6 @@
     private void setupSwipeRefresh() {
         binding.swipeRefreshLayout.setOnRefreshListener(() -> {
             Log.d(TAG, "Swipe refresh triggered - forcing API call");
-            // Force API call on swipe refresh
             loadNewsFromApi();
         });
 
@@ -142,7 +148,7 @@
         articles.clear();
         newsAdapter.notifyDataSetChanged();
 
-        // FORCE API CALL regardless of network status for testing
+        // Force API call for testing
         Log.d(TAG, "FORCING API CALL for filter test");
         loadNewsFromApi();
     }
@@ -151,14 +157,13 @@
         Log.d(TAG, "=== LOADING NEWS ===");
         Log.d(TAG, "Current filter: " + (currentFilter != null ? currentFilter.getName() : "null"));
 
-        // Check network with detailed logging
         boolean networkAvailable = isNetworkAvailable();
         Log.d(TAG, "Network check result: " + networkAvailable);
 
         if (networkAvailable) {
             loadNewsFromApi();
         } else {
-            Log.w(TAG, "No network available, loading from database");
+            Log.w(TAG, "No network available, loading from NewsDatabaseHelper");
             loadNewsFromDatabase();
         }
     }
@@ -213,12 +218,11 @@
                         newsAdapter.notifyDataSetChanged();
                         Log.d(TAG, "Adapter notified");
 
-                        // Save to database
+                        // Save to NewsDatabaseHelper
                         saveArticlesToDatabase(newsResponse.getArticles());
 
                         showContent();
 
-                        // Show success message with filter name
                         String message = "✅ " + currentFilter.getName() + ": " + articleCount + " articles loaded";
                         Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
                         Log.d(TAG, message);
@@ -260,39 +264,58 @@
     private void loadNewsFromDatabase() {
         showLoading();
 
+        // PERUBAHAN: Menggunakan NewsDatabaseHelper
         executorService.execute(() -> {
-            Log.d(TAG, "Loading news from database");
-            List<Article> cachedArticles = articleDao.getAllArticles();
+            Log.d(TAG, "Loading news from NewsDatabaseHelper");
+
+            try {
+                List<Article> cachedArticles = articleDao.getAllArticles();
 
-            mainHandler.post(() -> {
-                hideLoading();
+                mainHandler.post(() -> {
+                    hideLoading();
 
-                if (cachedArticles != null && !cachedArticles.isEmpty()) {
-                    Log.d(TAG, "Loaded " + cachedArticles.size() + " articles from database");
-                    articles.clear();
-                    articles.addAll(cachedArticles);
-                    newsAdapter.notifyDataSetChanged();
-                    showContent();
+                    if (cachedArticles != null && !cachedArticles.isEmpty()) {
+                        Log.d(TAG, "Loaded " + cachedArticles.size() + " articles from NewsDatabaseHelper");
+                        articles.clear();
+                        articles.addAll(cachedArticles);
+                        newsAdapter.notifyDataSetChanged();
+                        showContent();
 
-                    String message = "📱 Offline: showing cached " + currentFilter.getName() + " news";
-                    Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
-                } else {
-                    Log.w(TAG, "No cached articles found");
-                    showError("No cached news available", "Connect to internet and pull down to refresh");
-                }
-            });
+                        String message = "📱 Offline: showing cached " + currentFilter.getName() + " news";
+                        Toast.makeText(getContext(), message, Toast.LENGTH_SHORT).show();
+                    } else {
+                        Log.w(TAG, "No cached articles found in NewsDatabaseHelper");
+                        showError("No cached news available", "Connect to internet and pull down to refresh");
+                    }
+                });
+            } catch (Exception e) {
+                Log.e(TAG, "Error loading from NewsDatabaseHelper", e);
+                mainHandler.post(() -> {
+                    hideLoading();
+                    showError("Database Error", "Error loading cached news");
+                });
+            }
         });
     }
 
     private void saveArticlesToDatabase(List<Article> articles) {
+        // PERUBAHAN: Menggunakan NewsDatabaseHelper
         executorService.execute(() -> {
             try {
-                Log.d(TAG, "Saving " + articles.size() + " articles to database");
-                // Don't clear old articles, just add new ones
+                Log.d(TAG, "Saving " + articles.size() + " articles to NewsDatabaseHelper");
+
+                // Set timestamp untuk setiap artikel
+                for (Article article : articles) {
+                    if (article.getTimestamp() == 0) {
+                        article.setTimestamp(System.currentTimeMillis());
+                    }
+                }
+
                 articleDao.insertArticles(articles);
-                Log.d(TAG, "Articles saved successfully");
+                Log.d(TAG, "Articles saved successfully to NewsDatabaseHelper");
+
             } catch (Exception e) {
-                Log.e(TAG, "Error saving articles to database", e);
+                Log.e(TAG, "Error saving articles to NewsDatabaseHelper", e);
             }
         });
     }
@@ -367,18 +390,8 @@
             }
 
             NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
-            Log.d(TAG, "NetworkInfo: " + activeNetworkInfo);
-
-            boolean isConnected = activeNetworkInfo != null && activeNetworkInfo.isConnected();
-            boolean isAvailable = activeNetworkInfo != null && activeNetworkInfo.isAvailable();
-
-            Log.d(TAG, "Network connected: " + isConnected);
-            Log.d(TAG, "Network available: " + isAvailable);
-            Log.d(TAG, "Network type: " + (activeNetworkInfo != null ? activeNetworkInfo.getTypeName() : "null"));
-
-            // Try both conditions
-            boolean result = isConnected && isAvailable;
-            Log.d(TAG, "Final network result: " + result);
+            boolean result = activeNetworkInfo != null && activeNetworkInfo.isConnected();
+            Log.d(TAG, "Network available: " + result);
 
             return result;
 
@@ -395,6 +408,6 @@
             executorService.shutdown();
         }
         binding = null;
-        Log.d(TAG, "HomeFragment destroyed");
+        Log.d(TAG, "HomeFragment destroyed - NewsDatabaseHelper connections will be closed automatically");
     }
 }
\ No newline at end of file
Index: app/src/main/res/layout/item_news.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_news.xml b/app/src/main/res/layout/item_news.xml
new file mode 100644
--- /dev/null	(date 1748350142734)
+++ b/app/src/main/res/layout/item_news.xml	(date 1748350142734)
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/card_view"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_margin="4dp"
+    app:cardCornerRadius="8dp"
+    app:cardElevation="4dp"
+    android:clickable="true"
+    android:focusable="true"
+    android:foreground="?android:attr/selectableItemBackground">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:padding="12dp">
+
+        <LinearLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:orientation="vertical">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal">
+
+                <TextView
+                    android:id="@+id/text_title"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:textSize="16sp"
+                    android:textStyle="bold"
+                    android:textColor="#212121"
+                    android:maxLines="2"
+                    android:ellipsize="end"
+                    tools:text="Breaking News Title" />
+
+                <ImageView
+                    android:id="@+id/image_favorite"
+                    android:layout_width="16dp"
+                    android:layout_height="16dp"
+                    android:layout_marginStart="8dp"
+                    android:src="@drawable/ic_favorite_filled"
+                    android:visibility="gone"
+                    android:contentDescription="Favorite icon" />
+
+            </LinearLayout>
+
+            <TextView
+                android:id="@+id/text_description"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="4dp"
+                android:textSize="14sp"
+                android:textColor="#757575"
+                android:maxLines="2"
+                android:ellipsize="end"
+                tools:text="News description here..." />
+
+            <TextView
+                android:id="@+id/text_source_date"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dp"
+                android:textSize="12sp"
+                android:textColor="#9E9E9E"
+                tools:text="CNN • 2 hours ago" />
+
+        </LinearLayout>
+
+        <ImageView
+            android:id="@+id/image_news"
+            android:layout_width="80dp"
+            android:layout_height="80dp"
+            android:layout_marginStart="12dp"
+            android:scaleType="centerCrop"
+            android:background="@drawable/rounded_image_background"
+            android:contentDescription="News image"
+            tools:src="@drawable/placeholder_image" />
+
+    </LinearLayout>
+
+</androidx.cardview.widget.CardView>
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/utils/ApiKeyManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/utils/ApiKeyManager.java b/app/src/main/java/com/example/snapnews/utils/ApiKeyManager.java
new file mode 100644
--- /dev/null	(date 1748350142733)
+++ b/app/src/main/java/com/example/snapnews/utils/ApiKeyManager.java	(date 1748350142733)
@@ -0,0 +1,33 @@
+package com.example.snapnews.utils;
+
+import com.example.snapnews.BuildConfig;
+
+public class ApiKeyManager {
+
+    /**
+     * Get News API Key securely from BuildConfig
+     * @return API key string
+     */
+    public static String getNewsApiKey() {
+        String apiKey = BuildConfig.NEWS_API_KEY;
+
+        if (apiKey == null || apiKey.isEmpty()) {
+            throw new IllegalStateException(
+                    "NEWS_API_KEY not found! Please add it to local.properties file.\n" +
+                            "Add this line to local.properties:\n" +
+                            "NEWS_API_KEY=your_actual_api_key_here"
+            );
+        }
+
+        return apiKey;
+    }
+
+    /**
+     * Check if API key is configured
+     * @return true if API key exists and not empty
+     */
+    public static boolean isApiKeyConfigured() {
+        String apiKey = BuildConfig.NEWS_API_KEY;
+        return apiKey != null && !apiKey.isEmpty();
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/utils/DateUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/utils/DateUtils.java b/app/src/main/java/com/example/snapnews/utils/DateUtils.java
new file mode 100644
--- /dev/null	(date 1748350142728)
+++ b/app/src/main/java/com/example/snapnews/utils/DateUtils.java	(date 1748350142728)
@@ -0,0 +1,71 @@
+package com.example.snapnews.utils;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Locale;
+import java.util.TimeZone;
+
+public class DateUtils {
+    private static final String API_DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss'Z'";
+    private static final String DISPLAY_DATE_FORMAT = "MMM dd, yyyy";
+    private static final String DISPLAY_TIME_FORMAT = "MMM dd, yyyy • HH:mm";
+
+    public static String formatDate(String dateString) {
+        try {
+            SimpleDateFormat apiFormat = new SimpleDateFormat(API_DATE_FORMAT, Locale.getDefault());
+            apiFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+            Date date = apiFormat.parse(dateString);
+
+            SimpleDateFormat displayFormat = new SimpleDateFormat(DISPLAY_DATE_FORMAT, Locale.getDefault());
+            return displayFormat.format(date);
+        } catch (ParseException e) {
+            e.printStackTrace();
+            return dateString;
+        }
+    }
+
+    public static String formatDateTime(String dateString) {
+        try {
+            SimpleDateFormat apiFormat = new SimpleDateFormat(API_DATE_FORMAT, Locale.getDefault());
+            apiFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+            Date date = apiFormat.parse(dateString);
+
+            SimpleDateFormat displayFormat = new SimpleDateFormat(DISPLAY_TIME_FORMAT, Locale.getDefault());
+            return displayFormat.format(date);
+        } catch (ParseException e) {
+            e.printStackTrace();
+            return dateString;
+        }
+    }
+
+    public static String getTimeAgo(String dateString) {
+        try {
+            SimpleDateFormat apiFormat = new SimpleDateFormat(API_DATE_FORMAT, Locale.getDefault());
+            apiFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+            Date date = apiFormat.parse(dateString);
+
+            long timeMillis = date.getTime();
+            long currentTimeMillis = System.currentTimeMillis();
+            long timeDifference = currentTimeMillis - timeMillis;
+
+            long seconds = timeDifference / 1000;
+            long minutes = seconds / 60;
+            long hours = minutes / 60;
+            long days = hours / 24;
+
+            if (days > 0) {
+                return days == 1 ? "1 day ago" : days + " days ago";
+            } else if (hours > 0) {
+                return hours == 1 ? "1 hour ago" : hours + " hours ago";
+            } else if (minutes > 0) {
+                return minutes == 1 ? "1 minute ago" : minutes + " minutes ago";
+            } else {
+                return "Just now";
+            }
+        } catch (ParseException e) {
+            e.printStackTrace();
+            return formatDate(dateString);
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_search.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_search.xml b/app/src/main/res/layout/fragment_search.xml
new file mode 100644
--- /dev/null	(date 1748350142724)
+++ b/app/src/main/res/layout/fragment_search.xml	(date 1748350142724)
@@ -0,0 +1,144 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    tools:context=".fragment.SearchFragment">
+
+    <androidx.cardview.widget.CardView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="16dp"
+        app:cardCornerRadius="8dp"
+        app:cardElevation="2dp">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:padding="4dp">
+
+            <EditText
+                android:id="@+id/edit_text_search"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:background="@null"
+                android:hint="Search news..."
+                android:inputType="text"
+                android:maxLines="1"
+                android:padding="12dp"
+                android:textSize="16sp"
+                android:textColor="#212121"
+                android:textColorHint="#757575" />
+
+            <ImageButton
+                android:id="@+id/button_search"
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:background="?android:attr/selectableItemBackgroundBorderless"
+                android:src="@drawable/ic_search"
+                android:contentDescription="Search" />
+
+        </LinearLayout>
+
+    </androidx.cardview.widget.CardView>
+
+    <FrameLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <LinearLayout
+            android:id="@+id/layout_initial"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical"
+            android:gravity="center"
+            android:padding="32dp">
+
+            <ImageView
+                android:layout_width="64dp"
+                android:layout_height="64dp"
+                android:src="@drawable/ic_search_big"
+                android:alpha="0.5"
+                android:contentDescription="Search icon" />
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:text="Search for News"
+                android:textSize="18sp"
+                android:textStyle="bold"
+                android:textColor="#212121" />
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dp"
+                android:text="Find the latest news on any topic"
+                android:textSize="14sp"
+                android:textColor="#757575"
+                android:textAlignment="center" />
+
+        </LinearLayout>
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/recycler_view_search"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:padding="8dp"
+            android:clipToPadding="false"
+            android:visibility="gone"
+            tools:listitem="@layout/item_news" />
+
+        <ProgressBar
+            android:id="@+id/progress_bar"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:visibility="gone" />
+
+        <LinearLayout
+            android:id="@+id/layout_empty"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:orientation="vertical"
+            android:gravity="center"
+            android:padding="32dp"
+            android:visibility="gone">
+
+            <ImageView
+                android:layout_width="64dp"
+                android:layout_height="64dp"
+                android:src="@drawable/ic_no_results"
+                android:alpha="0.5"
+                android:contentDescription="No results icon" />
+
+            <TextView
+                android:id="@+id/text_empty_title"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:textSize="18sp"
+                android:textStyle="bold"
+                android:textColor="#212121"
+                android:text="No Results" />
+
+            <TextView
+                android:id="@+id/text_empty_message"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dp"
+                android:textSize="14sp"
+                android:textColor="#757575"
+                android:textAlignment="center"
+                android:text="Try different keywords" />
+
+        </LinearLayout>
+
+    </FrameLayout>
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/activity/SplashActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/activity/SplashActivity.java b/app/src/main/java/com/example/snapnews/activity/SplashActivity.java
new file mode 100644
--- /dev/null	(date 1748352257582)
+++ b/app/src/main/java/com/example/snapnews/activity/SplashActivity.java	(date 1748352257582)
@@ -0,0 +1,4 @@
+package com.example.snapnews.activity;
+
+public class SplashActivity {
+}
Index: app/src/main/res/layout/activity_splash.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_splash.xml b/app/src/main/res/layout/activity_splash.xml
new file mode 100644
--- /dev/null	(date 1748352257590)
+++ b/app/src/main/res/layout/activity_splash.xml	(date 1748352257590)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/white">
+
+    <ImageView
+        android:id="@+id/splash_icon"
+        android:layout_width="299dp"
+        android:layout_height="272dp"
+        android:src="@drawable/ic_app"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toRightOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0.498" />
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/adapter/FilterChipAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/adapter/FilterChipAdapter.java b/app/src/main/java/com/example/snapnews/adapter/FilterChipAdapter.java
new file mode 100644
--- /dev/null	(date 1748350142719)
+++ b/app/src/main/java/com/example/snapnews/adapter/FilterChipAdapter.java	(date 1748350142719)
@@ -0,0 +1,127 @@
+package com.example.snapnews.adapter;
+
+import android.graphics.drawable.GradientDrawable;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import androidx.annotation.NonNull;
+import androidx.core.content.ContextCompat;
+import androidx.recyclerview.widget.RecyclerView;
+import com.example.snapnews.R;
+import com.example.snapnews.databinding.ItemFilterChipBinding;
+import com.example.snapnews.models.FilterChip;
+import java.util.List;
+
+public class FilterChipAdapter extends RecyclerView.Adapter<FilterChipAdapter.ChipViewHolder> {
+    private static final String TAG = "FilterChipAdapter";
+    private List<FilterChip> filterChips;
+    private OnChipClickListener onChipClickListener;
+    private int selectedPosition = 0; // Default first item selected
+
+    public interface OnChipClickListener {
+        void onChipClick(FilterChip filterChip, int position);
+    }
+
+    public FilterChipAdapter(List<FilterChip> filterChips, OnChipClickListener listener) {
+        this.filterChips = filterChips;
+        this.onChipClickListener = listener;
+        // Set first item as selected by default
+        if (!filterChips.isEmpty()) {
+            filterChips.get(0).setSelected(true);
+            Log.d(TAG, "First chip selected: " + filterChips.get(0).getName());
+        }
+        Log.d(TAG, "FilterChipAdapter created with " + filterChips.size() + " chips");
+    }
+
+    @NonNull
+    @Override
+    public ChipViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        ItemFilterChipBinding binding = ItemFilterChipBinding.inflate(
+                LayoutInflater.from(parent.getContext()), parent, false);
+        return new ChipViewHolder(binding);
+    }
+
+    @Override
+    public void onBindViewHolder(@NonNull ChipViewHolder holder, int position) {
+        FilterChip filterChip = filterChips.get(position);
+        holder.bind(filterChip, position);
+    }
+
+    @Override
+    public int getItemCount() {
+        return filterChips.size();
+    }
+
+    public void setSelectedPosition(int position) {
+        Log.d(TAG, "Setting selected position from " + selectedPosition + " to " + position);
+
+        // Unselect previous item
+        if (selectedPosition >= 0 && selectedPosition < filterChips.size()) {
+            filterChips.get(selectedPosition).setSelected(false);
+        }
+
+        // Select new item
+        selectedPosition = position;
+        if (selectedPosition >= 0 && selectedPosition < filterChips.size()) {
+            filterChips.get(selectedPosition).setSelected(true);
+            Log.d(TAG, "Selected chip: " + filterChips.get(selectedPosition).getName());
+        }
+
+        notifyDataSetChanged();
+    }
+
+    class ChipViewHolder extends RecyclerView.ViewHolder {
+        private ItemFilterChipBinding binding;
+
+        public ChipViewHolder(@NonNull ItemFilterChipBinding binding) {
+            super(binding.getRoot());
+            this.binding = binding;
+        }
+
+        public void bind(FilterChip filterChip, int position) {
+            binding.textChip.setText(filterChip.getName());
+
+            // Update chip appearance based on selection state
+            updateChipAppearance(filterChip.isSelected());
+
+            Log.d(TAG, "Binding chip: " + filterChip.getName() +
+                    ", Selected: " + filterChip.isSelected() +
+                    ", Position: " + position);
+
+            // Set click listener
+            binding.chipContainer.setOnClickListener(v -> {
+                Log.d(TAG, "Chip clicked: " + filterChip.getName() +
+                        ", Currently selected: " + filterChip.isSelected());
+
+                if (onChipClickListener != null && !filterChip.isSelected()) {
+                    setSelectedPosition(position);
+                    onChipClickListener.onChipClick(filterChip, position);
+                } else if (filterChip.isSelected()) {
+                    Log.d(TAG, "Chip already selected, ignoring click");
+                }
+            });
+        }
+
+        private void updateChipAppearance(boolean isSelected) {
+            GradientDrawable background = new GradientDrawable();
+            background.setCornerRadius(50f); // Rounded corners
+
+            if (isSelected) {
+                // Selected state
+                background.setColor(ContextCompat.getColor(binding.getRoot().getContext(), R.color.primary_color));
+                background.setStroke(2, ContextCompat.getColor(binding.getRoot().getContext(), R.color.primary_color));
+                binding.textChip.setTextColor(ContextCompat.getColor(binding.getRoot().getContext(), R.color.white));
+                Log.d(TAG, "Chip appearance set to SELECTED");
+            } else {
+                // Unselected state
+                background.setColor(ContextCompat.getColor(binding.getRoot().getContext(), R.color.surface_color));
+                background.setStroke(2, ContextCompat.getColor(binding.getRoot().getContext(), R.color.gray));
+                binding.textChip.setTextColor(ContextCompat.getColor(binding.getRoot().getContext(), R.color.on_surface));
+                Log.d(TAG, "Chip appearance set to UNSELECTED");
+            }
+
+            binding.chipContainer.setBackground(background);
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/snapnews/models/FilterChip.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/snapnews/models/FilterChip.java b/app/src/main/java/com/example/snapnews/models/FilterChip.java
new file mode 100644
--- /dev/null	(date 1748350142721)
+++ b/app/src/main/java/com/example/snapnews/models/FilterChip.java	(date 1748350142721)
@@ -0,0 +1,28 @@
+package com.example.snapnews.models;
+
+public class FilterChip {
+    private String name;
+    private String category;
+    private String country;
+    private boolean isSelected;
+
+    public FilterChip(String name, String category, String country) {
+        this.name = name;
+        this.category = category;
+        this.country = country;
+        this.isSelected = false;
+    }
+
+    // Getters and Setters
+    public String getName() { return name; }
+    public void setName(String name) { this.name = name; }
+
+    public String getCategory() { return category; }
+    public void setCategory(String category) { this.category = category; }
+
+    public String getCountry() { return country; }
+    public void setCountry(String country) { this.country = country; }
+
+    public boolean isSelected() { return isSelected; }
+    public void setSelected(boolean selected) { isSelected = selected; }
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_favorites.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_favorites.xml b/app/src/main/res/layout/fragment_favorites.xml
new file mode 100644
--- /dev/null	(date 1748350142715)
+++ b/app/src/main/res/layout/fragment_favorites.xml	(date 1748350142715)
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".fragment.FavoritesFragment">
+
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/recycler_view_favorites"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:padding="8dp"
+        android:clipToPadding="false"
+        tools:listitem="@layout/item_news" />
+
+    <ProgressBar
+        android:id="@+id/progress_bar"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:visibility="gone" />
+
+    <LinearLayout
+        android:id="@+id/layout_empty"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
+        android:gravity="center"
+        android:padding="32dp"
+        android:visibility="gone">
+
+        <ImageView
+            android:layout_width="64dp"
+            android:layout_height="64dp"
+            android:src="@drawable/ic_favorite_empty"
+            android:alpha="0.5"
+            android:contentDescription="No favorites icon" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="16dp"
+            android:text="No Favorites Yet"
+            android:textSize="18sp"
+            android:textStyle="bold"
+            android:textColor="#212121" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="8dp"
+            android:text="Save articles to read later by tapping the heart icon"
+            android:textSize="14sp"
+            android:textColor="#757575"
+            android:textAlignment="center" />
+
+    </LinearLayout>
+
+</FrameLayout>
\ No newline at end of file
Index: app/src/main/res/layout/item_filter_chip.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/item_filter_chip.xml b/app/src/main/res/layout/item_filter_chip.xml
new file mode 100644
--- /dev/null	(date 1748350142708)
+++ b/app/src/main/res/layout/item_filter_chip.xml	(date 1748350142708)
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- layout/item_filter_chip.xml -->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/chip_container"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_marginEnd="8dp"
+    android:orientation="horizontal"
+    android:paddingStart="16dp"
+    android:paddingTop="8dp"
+    android:paddingEnd="16dp"
+    android:paddingBottom="8dp"
+    android:clickable="true"
+    android:focusable="true"
+    android:foreground="?android:attr/selectableItemBackground">
+
+    <TextView
+        android:id="@+id/text_chip"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textSize="14sp"
+        android:textStyle="bold"
+        android:fontFamily="sans-serif-medium"
+        android:singleLine="true"
+        android:text="Filter" />
+
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/menu/detail_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/detail_menu.xml b/app/src/main/res/menu/detail_menu.xml
new file mode 100644
--- /dev/null	(date 1748350142703)
+++ b/app/src/main/res/menu/detail_menu.xml	(date 1748350142703)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/action_favorite"
+        android:icon="@drawable/ic_favorite_border"
+        android:title="Favorite"
+        app:showAsAction="always" />
+</menu>
\ No newline at end of file
